from fastapi import APIRouter, Request, status
from fastapi.responses import JSONResponse

from database.controller.orm_instance import get_orm
from services.utils.logger import setup_logger

router = APIRouter(prefix="/webhook/tochka")
logger = setup_logger(__name__)

orm_controller = get_orm()

@router.post("/")
async def handle_payment_webhook(request: Request):
    try:
        body = await request.json()
        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç –¢–æ—á–∫–∏: %s", body)

        operations = body.get("Data", {}).get("Operation")
        if not operations:
            return JSONResponse(status_code=400, content={"error": "No operations found"})

        for op in operations:
            status_ = op.get("status")
            purpose = op.get("purpose")
            amount = op.get("amount")

            if not (status_ and purpose and amount):
                continue

            if status_ != "APPROVED":
                continue

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Telegram ID
            try:
                if "Telegram ID" in purpose:
                    user_id = int(purpose.split("Telegram ID")[-1].strip())
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å Telegram ID –∏–∑ purpose: %s", purpose)
                    continue
            except Exception as e:
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id: %s", e)
                continue

            try:
                await orm_controller.balance.add_balance(user_id=user_id, amount=float(amount))
                logger.info("üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %s‚ÇΩ", user_id, amount)
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, e)

        return JSONResponse(status_code=status.HTTP_200_OK, content={"message": "Webhook processed"})

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞")
        return JSONResponse(status_code=500, content={"error": str(e)})
