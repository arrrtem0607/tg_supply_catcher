import asyncio
import uvicorn

from contextlib import asynccontextmanager
from fastapi import FastAPI
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder, Redis
from aiogram_dialog import setup_dialogs

from configurations import get_config
from bot import get_all_routers
from services.payments.service import router as webhook_router
from services.utils.logger import setup_logger
from bot.middlewares.db_middleware import initialize_database
from services.payments.client import TochkaAPIClient
from configurations.payments_config import PaymentsConfig

logger = setup_logger(__name__)

# -- Lifespan –¥–ª—è FastAPI --
@asynccontextmanager
async def lifespan(app: FastAPI):
    await asyncio.sleep(5)  # ‚è±Ô∏è –¥–∞—Ç—å FastAPI –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–Ω—è—Ç—å—Å—è
    client = TochkaAPIClient(PaymentsConfig())
    try:
        url = "https://82ef-45-144-233-139.ngrok-free.app/webhook/tochka/"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
        await client.setup_webhook(url)
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ –¢–æ—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞ –¢–æ—á–∫–∏: %s", e)

    yield  # ‚è≥ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    try:
        await client.delete_webhook()
        logger.info("üóëÔ∏è –í–µ–±—Ö—É–∫ –¢–æ—á–∫–∏ —É–¥–∞–ª—ë–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –¢–æ—á–∫–∏: %s", e)

# -- FastAPI app --
app = FastAPI(lifespan=lifespan)
app.include_router(webhook_router)


async def run_fastapi():
    config = uvicorn.Config(app, host="0.0.0.0", port=8010, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()


async def setup_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="Start the bot / –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/menu", description="Main menu / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="/language", description="Change language / –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"),
        BotCommand(command="/drop_tables", description="‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (dev only)"),
        BotCommand(command="/truncate_tables", description="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (dev only)"),
    ]
    await bot.set_my_commands(commands)


async def run_bot():
    config = get_config()

    redis = Redis(host="localhost")
    key_builder = DefaultKeyBuilder(with_destiny=True)
    storage = RedisStorage(redis=redis, key_builder=key_builder)

    bot = Bot(
        token=config.bot_config.get_token(),
        default=DefaultBotProperties(parse_mode="HTML")
    )
    dp = Dispatcher(storage=storage)

    dp.include_router(await get_all_routers())
    setup_dialogs(dp)

    await setup_bot_commands(bot)
    await initialize_database()
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

    await dp.start_polling(bot)


async def main():
    await asyncio.gather(
        run_fastapi(),
        run_bot(),
    )


if __name__ == "__main__":
    asyncio.run(main())
