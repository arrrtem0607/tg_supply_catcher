from sqlalchemy import select, update
from sqlalchemy.orm import joinedload

from database.db_utils import session_manager
from database.entities.models import Supply, Client
from database.enums import Status
from services.utils.logger import setup_logger

logger = setup_logger(__name__)

STATUS_TRANSLATION = {
    "RECEIVED": "üì• –ü–æ–ª—É—á–µ–Ω–æ",
    "CATCHING": "üéØ –õ–æ–≤–∏—Ç—Å—è",
    "CAUGHT": "‚úÖ –ü–æ–π–º–∞–Ω–æ",
    "ERROR": "‚ùå –û—à–∏–±–∫–∞",
    "CANCELLED": "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ",
    "PLANNED": "üìå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
    "IN_PROGRESS": "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
    "COMPLETED": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
}

class SupplyController:
    def __init__(self):
        logger.info("SupplyController initialized")

    @session_manager
    async def get_supplies_by_client(self, session, user_id: int, client_id: str):
        result = await session.execute(
            select(Client).where(Client.client_id == client_id, Client.user_id == user_id)
        )
        client = result.scalars().first()
        if not client:
            return []

        db_supplies = await session.execute(
            select(Supply)
            .options(joinedload(Supply.client), joinedload(Supply.user))
            .where(Supply.client_id == client_id, Supply.user_id == user_id)
        )
        return [s.to_dict() for s in db_supplies.scalars().all()]

    @session_manager
    async def get_supply_by_id(self, session, user_id: int, preorder_id: int):
        result = await session.execute(
            select(Supply).where(Supply.user_id == user_id, Supply.preorder_id == preorder_id)
        )
        return result.scalars().first()

    @session_manager
    async def update_status_by_preorder_id(self, session, preorder_id: int, new_status: Status):
        result = await session.execute(
            update(Supply)
            .where(Supply.preorder_id == preorder_id)
            .values(status=new_status)
            .execution_options(synchronize_session="fetch")
        )
        if result.rowcount == 0:
            logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤–∫–∏ —Å preorder_id={preorder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return {"error": f"–ü–æ—Å—Ç–∞–≤–∫–∏ —Å preorder_id {preorder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"}

        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–æ–∫ —Å preorder_id={preorder_id} –Ω–∞ {new_status.name}")
        return {"message": f"–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤–æ–∫ —Å preorder_id={preorder_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_status.name}"}
