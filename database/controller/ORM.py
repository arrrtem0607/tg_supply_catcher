from datetime import datetime, timedelta
from sqlalchemy import inspect, text, select
from sqlalchemy.orm import joinedload
from aiohttp import ClientSession

from database.entities.core import Base, Database
from database.entities.models import User, Client, Supply, Subscription, Tariff
from bot.enums.status_enums import Status
from bot.utils.mpwave_api import MPWAVEAPI
from bot.utils.wildberries_api import WildberriesAPI
from database.controller.balance_controller import BalanceController
from database.db_utils import session_manager
from bot.utils.logger import setup_logger

logger = setup_logger(__name__)

STATUS_TRANSLATION = {
    "RECEIVED": "üì• –ü–æ–ª—É—á–µ–Ω–æ",
    "CATCHING": "üéØ –õ–æ–≤–∏—Ç—Å—è",
    "CAUGHT": "‚úÖ –ü–æ–π–º–∞–Ω–æ",
    "ERROR": "‚ùå –û—à–∏–±–∫–∞",
    "CANCELLED": "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ",
    "PLANNED": "üìå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
    "IN_PROGRESS": "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
    "COMPLETED": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
}

async def fetch_supplies_from_api(client_id: str):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ MPWAVEAPI."""
    return await MPWAVEAPI.fetch_supplies_from_api(client_id)

class ORMController:
    def __init__(self, db: Database = Database()):
        self.db = db
        self.api = MPWAVEAPI()
        self.wb_api = WildberriesAPI()
        self.balance = BalanceController(db)  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
        logger.info("ORMController initialized")

    async def create_tables(self):
        async with self.db.async_engine.begin() as conn:

            def sync_inspect(connection):
                inspector = inspect(connection)
                return inspector.get_table_names()

            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db.async_engine.url.database}")

            # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É `public`
            await conn.run_sync(lambda c: c.execute(text("SET search_path TO public")))

            existing_tables = await conn.run_sync(sync_inspect)
            logger.info(f"üìå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

            found_metadata_tables = list(Base.metadata.tables.keys())
            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ metadata: {found_metadata_tables}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –Ω–æ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            if existing_tables and set(existing_tables) != set(found_metadata_tables):
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö! –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")

                # ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
                await conn.run_sync(Base.metadata.drop_all)
                logger.info("üóëÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã!")

                # ‚úÖ –°–æ–∑–¥–∞–µ–º –∏—Ö –∑–∞–Ω–æ–≤–æ
                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")

            elif not existing_tables:
                logger.info("üîß –¢–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö...")
                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            else:
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    @session_manager
    async def seed_tariffs(self, session):
        existing = await session.execute(select(Tariff))
        if existing.scalars().first():
            logger.info("üì¶ –¢–∞—Ä–∏—Ñ—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.")
            return

        tariffs = [
            Tariff(name="–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", price=25000, duration_days=30, is_subscription=True),
            Tariff(name="–†–∞–∑–æ–≤—ã–π –æ—Ç–ª–æ–≤ (–∫–æ—Ä–æ–±)", price=1000, duration_days=None, is_subscription=False),
            Tariff(name="–†–∞–∑–æ–≤—ã–π –æ—Ç–ª–æ–≤ (–ø–∞–ª–ª–µ—Ç)", price=1500, duration_days=None, is_subscription=False),
        ]
        session.add_all(tariffs)
        logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã")

    @session_manager
    async def add_client(self, session, tg_id: int, client_id: str, name: str, cookies: str):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –∫–ª—é—á—É
        stmt = select(Client).where(Client.client_id == client_id, Client.user_id == tg_id)
        if (await session.execute(stmt)).scalars().first():
            return  # —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        session.add(Client(
            client_id=client_id,
            user_id=tg_id,
            name=name,
            cookies=cookies
        ))

    @session_manager
    async def get_client_by_name(self, session, tg_id: int, name: str):
        result = await session.execute(select(Client).where(Client.name == name, Client.user_id == tg_id))
        return result.scalars().first()

    @session_manager
    async def get_clients_by_user_id(self, session, tg_id: int):
        result = await session.execute(select(Client).where(Client.user_id == tg_id))
        return result.scalars().all()

    @session_manager
    async def get_supplies_by_client(self, session, user_id: int, client_id: str):

        result = await session.execute(select(Client).where(Client.client_id == client_id, Client.user_id == user_id))
        client = result.scalars().first()
        if not client:
            return []

        db_supplies = await session.execute(select(Supply).options(joinedload(Supply.client), joinedload(Supply.user)).where(Supply.client_id == client_id))
        db_supplies = {str(s.id): s for s in db_supplies.scalars().all()}

        supplies, api_error = await self.api.fetch_supplies_from_api(client_id)
        if api_error:
            return [s.to_dict() for s in db_supplies.values()]

        api_supply_ids = {str(s.get("supplyId") or s.get("preorderId")) for s in supplies}
        db_supply_ids = set(db_supplies.keys())

        for supply_id in db_supply_ids - api_supply_ids:
            await session.delete(db_supplies[supply_id])

        new_supplies = []
        for supply in supplies:
            supply_id = str(supply.get("supplyId") or supply.get("preorderId"))
            api_created_at = supply.get("createDate")
            if api_created_at:
                api_created_at = datetime.fromisoformat(api_created_at).replace(tzinfo=None)

            warehouse_name = supply.get("warehouseName", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
            warehouse_address = supply.get("warehouseAddress", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
            box_type = supply.get("boxTypeName", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")

            if supply_id not in db_supply_ids:
                new_supplies.append(Supply(id=int(supply_id), user_id=user_id, client_id=client_id, status=Status.RECEIVED.value, api_created_at=api_created_at, warehouse_name=warehouse_name, warehouse_address=warehouse_address, box_type=box_type))
            else:
                existing = db_supplies[supply_id]
                if not existing.api_created_at and api_created_at:
                    existing.api_created_at = api_created_at
                existing.warehouse_name = warehouse_name
                existing.warehouse_address = warehouse_address
                existing.box_type = box_type

        session.add_all(new_supplies)
        return [
            {
                "id": s.id,
                "user_id": s.user_id,
                "client_id": str(s.client_id),
                "status": s.status,
                "created_at": s.created_at.isoformat() if s.created_at else None,
                "updated_at": s.updated_at.isoformat() if s.updated_at else None,
                "api_created_at": s.api_created_at.isoformat() if s.api_created_at else None,
                "warehouse_name": s.warehouse_name,
                "warehouse_address": s.warehouse_address,
                "box_type": s.box_type,
                "client_name": s.client.name if s.client else None,
                "user_name": s.user.username if s.user else None,
            }
            for s in list(db_supplies.values()) + new_supplies
        ]

    @session_manager
    async def register_user(self, session, tg_id: int, username: str | None):
        from sqlalchemy import select  # –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—ã—à–µ
        logger.debug(f"üìç –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: tg_id={tg_id}, username={username}")

        try:
            result = await session.execute(select(User).where(User.tg_id == tg_id))
            user = result.scalars().first()
            if user:
                logger.debug(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id={tg_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}

            logger.debug(f"üîÑ –í—ã–∑–æ–≤ API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_id={tg_id}")
            response = await self.api.register_user_api(tg_id)

            if response is None:
                logger.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API (None)")
                return {"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"}

            if response.status != 200:
                error_text = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API: {response.status} | {error_text}")
                return {"error": f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_text}"}

            new_user = User(tg_id=tg_id, username=username or "unknown")
            session.add(new_user)

            logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg_id={tg_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ")
            return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"}

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ register_user: {e}", exc_info=True)
            return {"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}

    @session_manager
    async def register_client(self, session, tg_id: int, client_id: str, name: str, cookies: str):
        existing_client = await self.get_client_by_name(tg_id, name)
        if existing_client:
            return {"error": "–ö–∞–±–∏–Ω–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}

        async with ClientSession() as http_session:
            is_valid = await self.wb_api.validate_token(token="", cookie_string=cookies, session=http_session)
            if not is_valid:
                return {"error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."}

        api_result = await self.api.register_client_api(tg_id, client_id, name, cookies)
        if "error" in api_result:
            return {"error": api_result["error"]}

        await self.add_client(tg_id, client_id, name, cookies)
        return {"message": "–ö–∞–±–∏–Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "client_id": client_id}

    @session_manager
    async def confirm_supply_catching(
            self, session, supply_id: int, start_date: str, end_date: str, skip_dates: list, coefficient: float
    ):
        """–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç–∞–≤–∫—É –≤ –ë–î –ø—Ä–∏ —É—Å–ø–µ—Ö–µ."""

        result = await session.execute(select(Supply).where(Supply.id == int(supply_id)))
        supply = result.scalars().first()

        if not supply:
            logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤–∫–∞ —Å ID {supply_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return {"error": f"–ü–æ—Å—Ç–∞–≤–∫–∞ —Å ID {supply_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"}

        try:
            start_dt = datetime.fromisoformat(start_date)
            end_dt = datetime.fromisoformat(end_date)
            skip_dt_list = [datetime.fromisoformat(d) for d in skip_dates]
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç: {e}"}

        # ‚¨áÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
        api_data = {
            "client_id": str(supply.client_id),
            "preorder_id": supply.id,
            "start_date": start_date,
            "end_date": end_date,
            "skip_dates": skip_dates,
            "coefficient": coefficient,
        }

        # ‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Ç–ª–æ–≤
        response = await self.api.start_task_api(api_data)

        if not response or response.status != 200:
            text = await response.text() if response else "–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ª–æ–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {text}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ª–æ–≤–∞: {text}"}

        # ‚¨áÔ∏è –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—è–ª ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        supply.status = Status.CATCHING.value
        supply.start_catch_date = start_dt
        supply.end_catch_date = end_dt
        supply.skip_dates = skip_dt_list
        supply.coefficient = coefficient

        logger.info(
            f"‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ç–ª–æ–≤: "
            f"start_catch_date={start_dt}, end_catch_date={end_dt}, "
            f"skip_dates={skip_dt_list}, coefficient={coefficient}"
        )

        return {"message": f"–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ç–ª–æ–≤"}

    @session_manager
    async def get_supply_by_id(self, session, supply_id: str):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É –ø–æ ID"""
        result = await session.execute(select(Supply).where(Supply.id == int(supply_id)))
        return result.scalars().first()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É (–∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)

    @session_manager
    async def cancel_catching(self, session, client_id: str, supply_id: int):
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–ª–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ MPWAVEAPI –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î."""
        logger.info(f"üö´ –û—Ç–º–µ–Ω–∞ –æ—Ç–ª–æ–≤–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")

        response = await self.api.cancel_task_api(client_id, supply_id)
        if response.status != 200:
            error_text = await response.text()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –æ—Ç–º–µ–Ω—ã –æ—Ç–ª–æ–≤–∞: {error_text}")
            return {"error": f"–û—à–∏–±–∫–∞ API: {error_text}"}

        result = await session.execute(select(Supply).where(Supply.id == supply_id))
        supply = result.scalars().first()
        if not supply:
            logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            return {"error": "–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ"}

        supply.status = Status.RECEIVED.value
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ RECEIVED")
        return {"message": f"–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞"}

    @session_manager
    async def update_client_name(self, session, client_id: str, new_name: str):
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–∞ '{new_name}'")

        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        response = await self.api.update_client_name_api(client_id, new_name)
        if response is None or response.status != 200:
            error_text = await response.text() if response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {error_text}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {error_text}"}

        # –ï—Å–ª–∏ —É—Å–ø–µ—Ö ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        result = await session.execute(select(Client).where(Client.client_id == client_id))
        client = result.scalars().first()

        if not client:
            logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return {"error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"}

        client.name = new_name
        logger.info(f"‚úÖ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î –Ω–∞ '{new_name}'")
        return {"message": "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"}

    @session_manager
    async def update_client_cookies(self, session, client_id: str, new_cookies: str):
        logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å cookies
        async with ClientSession() as http_session:
            is_valid = await self.wb_api.validate_token(token="", cookie_string=new_cookies, session=http_session)
            if not is_valid:
                logger.warning(f"‚ùå –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ cookies –Ω–µ–≤–∞–ª–∏–¥–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
                return {"error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        response = await self.api.update_client_cookies_api(client_id, new_cookies)
        if response is None or response.status != 200:
            error_text = await response.text() if response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ cookies –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {error_text}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ cookies –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {error_text}"}

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = await session.execute(select(Client).where(Client.client_id == client_id))
        client = result.scalars().first()

        if not client:
            logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return {"error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"}

        client.cookies = new_cookies
        logger.info(f"‚úÖ Cookies –∫–ª–∏–µ–Ω—Ç–∞ {client_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î")
        return {"message": "Cookies –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}

    @session_manager
    async def create_subscription(self, session, user_id: int, tariff_id: int, start: datetime, end: datetime):
        stmt = (
            select(Subscription)
            .where(Subscription.user_id == user_id, Subscription.is_active == True)
            .limit(1)
        )
        result = await session.execute(stmt)
        current_subscription = result.scalars().first()

        if current_subscription:
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É: –¥–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            current_subscription.end_date += timedelta(days=30)
            logger.info(f"üîÅ –ü—Ä–æ–¥–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_id} –¥–æ {current_subscription.end_date}")
            return current_subscription.end_date
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            new_subscription = Subscription(
                user_id=user_id,
                tariff_id=tariff_id,
                start_date=start,
                end_date=end,
                is_active=True,
            )
            session.add(new_subscription)
            logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_id}")
            return new_subscription.end_date

    @session_manager
    async def get_active_subscription(self, session, user_id: int):
        stmt = (
            select(Subscription)
            .options(joinedload(Subscription.tariff))  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º tariff —Å—Ä–∞–∑—É
            .where(
                Subscription.user_id == user_id,
                Subscription.is_active == True
            )
            .limit(1)
        )
        result = await session.execute(stmt)
        return result.scalars().first()

    @session_manager
    async def get_all_tariffs(self, session):
        result = await session.execute(select(Tariff))
        return result.scalars().all()
