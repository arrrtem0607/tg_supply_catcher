from datetime import datetime, timedelta
from sqlalchemy import inspect, text, select
from sqlalchemy.orm import joinedload
from aiohttp import ClientSession

from database.entities.core import Base, Database
from database.entities.models import User, Client, Subscription, Tariff
from services.utils.mpwave_api import MPWAVEAPI
from services.utils.wildberries_api import WildberriesAPI
from database.controller.balance_controller import BalanceController
from database.controller.supply_controller import SupplyController
from database.db_utils import session_manager
from services.utils.logger import setup_logger

logger = setup_logger(__name__, level="WARNING")

class ORMController:
    def __init__(self, db: Database = Database()):
        self.db = db
        self.api = MPWAVEAPI()
        self.wb_api = WildberriesAPI()
        self.balance = BalanceController(db)
        self.supply = SupplyController(db)
        logger.info("ORMController initialized")

    async def create_tables(self):
        async with self.db.async_engine.begin() as conn:

            def sync_inspect(connection):
                inspector = inspect(connection)
                return inspector.get_table_names()

            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db.async_engine.url.database}")
            await conn.run_sync(lambda c: c.execute(text("SET search_path TO public")))

            existing_tables = await conn.run_sync(sync_inspect)
            logger.info(f"üìå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

            found_metadata_tables = [
                name.split(".")[-1]
                for name in Base.metadata.tables.keys()
            ]
            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ metadata: {found_metadata_tables}")

            if existing_tables and set(existing_tables) != set(found_metadata_tables):
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö! –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")

                await conn.run_sync(Base.metadata.drop_all)
                logger.info("üóëÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã!")

                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")

            elif not existing_tables:
                logger.info("üîß –¢–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö...")
                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            else:
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    async def drop_tables(self):
        async with self.db.async_engine.begin() as conn:
            await conn.run_sync(lambda c: c.execute(text("SET search_path TO public")))
            await conn.run_sync(Base.metadata.drop_all)
            logger.warning("üóëÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é!")

    async def truncate_tables(self):
        async with self.db.async_engine.begin() as conn:
            await conn.run_sync(lambda c: c.execute(text("SET search_path TO public")))
            tables = Base.metadata.sorted_tables
            for table in tables:
                await conn.execute(text(f'TRUNCATE TABLE "{table.name}" RESTART IDENTITY CASCADE'))
            logger.info("üßπ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã (TRUNCATE).")

    @session_manager
    async def seed_tariffs(self, session):
        existing = await session.execute(select(Tariff))
        if existing.scalars().first():
            logger.info("üì¶ –¢–∞—Ä–∏—Ñ—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.")
            return

        tariffs = [
            Tariff(name="–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", price=25000, duration_days=30, is_subscription=True),
            Tariff(name="–†–∞–∑–æ–≤—ã–π –æ—Ç–ª–æ–≤ (–∫–æ—Ä–æ–±)", price=1000, duration_days=None, is_subscription=False),
            Tariff(name="–†–∞–∑–æ–≤—ã–π –æ—Ç–ª–æ–≤ (–ø–∞–ª–ª–µ—Ç)", price=1500, duration_days=None, is_subscription=False),
        ]
        session.add_all(tariffs)
        logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã")

    @session_manager
    async def add_client(self, session, tg_id: int, client_id: str, name: str, cookies: str, refresh_token: str):
        stmt = select(Client).where(Client.client_id == client_id, Client.user_id == tg_id)
        if (await session.execute(stmt)).scalars().first():
            return
        session.add(Client(
            client_id=client_id,
            user_id=tg_id,
            name=name,
            cookies=cookies,
            refresh_token=refresh_token
        ))

    @session_manager
    async def get_client_by_name(self, session, tg_id: int, name: str):
        result = await session.execute(select(Client).where(Client.name == name, Client.user_id == tg_id))
        return result.scalars().first()

    @session_manager
    async def get_clients_by_user_id(self, session, tg_id: int):
        result = await session.execute(select(Client).where(Client.user_id == tg_id))
        return result.scalars().all()

    @session_manager
    async def register_user(self, session, tg_id: int, username: str | None):
        logger.debug(f"üìç –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: tg_id={tg_id}, username={username}")

        try:
            result = await session.execute(select(User).where(User.tg_id == tg_id))
            user = result.scalars().first()
            if user:
                logger.debug(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id={tg_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}

            response = await self.api.register_user_api(tg_id)
            if response is None or response.status != 200:
                error_text = await response.text() if response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API: {error_text}")
                return {"error": f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_text}"}

            session.add(User(tg_id=tg_id, username=username or "unknown"))
            return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"}

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ register_user: {e}", exc_info=True)
            return {"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}

    @session_manager
    async def register_client(self, session, tg_id: int, client_id: str, name: str, cookies: str, refresh_token: str):
        existing_client = await self.get_client_by_name(tg_id, name)
        if existing_client:
            return {"error": "–ö–∞–±–∏–Ω–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}

        async with ClientSession() as http_session:
            is_valid = await self.wb_api.validate_token(token="", cookie_string=cookies, session=http_session)
            if not is_valid:
                return {"error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."}

        api_result = await self.api.register_client_api(tg_id, client_id, name, cookies, refresh_token)
        if "error" in api_result:
            return {"error": api_result["error"]}

        await self.add_client(tg_id, client_id, name, cookies, refresh_token)
        return {"message": "–ö–∞–±–∏–Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "client_id": client_id}

    @session_manager
    async def update_client_name(self, session, client_id: str, new_name: str):
        response = await self.api.update_client_name_api(client_id, new_name)
        if response is None or response.status != 200:
            error_text = await response.text() if response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {error_text}"}

        result = await session.execute(select(Client).where(Client.client_id == client_id))
        client = result.scalars().first()
        if not client:
            return {"error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"}

        client.name = new_name
        return {"message": "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"}

    @session_manager
    async def update_client_cookies(self, session, client_id: str, new_cookies: str):
        async with ClientSession() as http_session:
            is_valid = await self.wb_api.validate_token(token="", cookie_string=new_cookies, session=http_session)
            if not is_valid:
                return {"error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."}

        response = await self.api.update_client_cookies_api(client_id, new_cookies)
        if response is None or response.status != 200:
            error_text = await response.text() if response else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ cookies –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {error_text}"}

        result = await session.execute(select(Client).where(Client.client_id == client_id))
        client = result.scalars().first()
        if not client:
            return {"error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"}

        client.cookies = new_cookies
        return {"message": "Cookies –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}

    @session_manager
    async def create_subscription(self, session, user_id: int, tariff_id: int, start: datetime, end: datetime):
        stmt = (
            select(Subscription)
            .where(Subscription.user_id == user_id, Subscription.is_active == True)
            .limit(1)
        )
        result = await session.execute(stmt)
        current_subscription = result.scalars().first()

        if current_subscription:
            current_subscription.end_date += timedelta(days=30)
            return current_subscription.end_date
        else:
            new_subscription = Subscription(
                user_id=user_id,
                tariff_id=tariff_id,
                start_date=start,
                end_date=end,
                is_active=True,
            )
            session.add(new_subscription)
            return new_subscription.end_date

    @session_manager
    async def get_active_subscription(self, session, user_id: int):
        stmt = (
            select(Subscription)
            .options(joinedload(Subscription.tariff))
            .where(
                Subscription.user_id == user_id,
                Subscription.is_active == True
            )
            .limit(1)
        )
        result = await session.execute(stmt)
        return result.scalars().first()

    @session_manager
    async def get_all_tariffs(self, session):
        result = await session.execute(select(Tariff))
        return result.scalars().all()
