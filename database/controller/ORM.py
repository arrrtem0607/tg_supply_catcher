import logging
from sqlalchemy import inspect, text, select
from sqlalchemy.orm import joinedload
import aiohttp
import uuid
from datetime import datetime

from database.entities.core import Base, Database
from database.entities.models import User, Client, Supply
from bot.enums.status_enums import Status

logger = logging.getLogger(__name__)

STATUS_TRANSLATION = {
    "RECEIVED": "üì• –ü–æ–ª—É—á–µ–Ω–æ",
    "CATCHING": "üéØ –õ–æ–≤–∏—Ç—Å—è",
    "CAUGHT": "‚úÖ –ü–æ–π–º–∞–Ω–æ",
    "ERROR": "‚ùå –û—à–∏–±–∫–∞",
    "CANCELLED": "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ",
    "PLANNED": "üìå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
    "IN_PROGRESS": "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
    "COMPLETED": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
}

async def fetch_supplies_from_api(base_url: str, client_uuid: uuid.UUID):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏."""
    url = f"{base_url}/catcher/all_supplies"
    params = {"client_id": str(client_uuid)}

    async with aiohttp.ClientSession() as http_session:
        try:
            async with http_session.get(url, params=params) as response:
                response_text = await response.text()
                if response.status != 200:
                    return None, f"–û—à–∏–±–∫–∞ API: {response.status}, –û—Ç–≤–µ—Ç: {response_text}"
                return await response.json(), None
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}"

def session_manager(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π"""
    async def wrapper(self, *args, **kwargs):
        async with self.db.session() as session:  # ‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            async with session.begin():  # ‚úÖ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                try:
                    result = await func(self, session, *args, **kwargs)  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º session –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    await session.commit()  # ‚úÖ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    logger.debug(f"‚úÖ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return result
                except Exception as e:
                    await session.rollback()  # ‚úÖ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
                    raise e
    return wrapper

class ORMController:
    BASE_URL = "http://127.0.0.1:8001"  # –õ–æ–∫–∞–ª—å–Ω—ã–π API
    def __init__(self, db: Database = Database()):
        self.db = db
        logger.info("ORMController initialized")

    async def create_tables(self):
        async with self.db.async_engine.begin() as conn:

            def sync_inspect(connection):
                inspector = inspect(connection)
                return inspector.get_table_names()

            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db.async_engine.url.database}")

            # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É `public`
            await conn.run_sync(lambda c: c.execute(text("SET search_path TO public")))

            existing_tables = await conn.run_sync(sync_inspect)
            logger.info(f"üìå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

            found_metadata_tables = list(Base.metadata.tables.keys())
            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ metadata: {found_metadata_tables}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –Ω–æ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            if existing_tables and set(existing_tables) != set(found_metadata_tables):
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö! –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")

                # ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
                await conn.run_sync(Base.metadata.drop_all)
                logger.info("üóëÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã!")

                # ‚úÖ –°–æ–∑–¥–∞–µ–º –∏—Ö –∑–∞–Ω–æ–≤–æ
                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")

            elif not existing_tables:
                logger.info("üîß –¢–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö...")
                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            else:
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    @session_manager
    async def add_client(self, session, tg_id: int, client_id: str | None, name: str, cookies: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""

        # –ï—Å–ª–∏ client_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID
        if client_id is None:
            client_uuid = uuid.uuid4()
        else:
            try:
                client_uuid = uuid.UUID(client_id)
            except ValueError:
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π client_id: {client_id}")
                return

        result = await session.execute(select(Client).where(Client.client_id == str(client_uuid)))
        existing_client = result.scalars().first()

        if existing_client:
            logger.info(f"‚ö†Ô∏è –ö–∞–±–∏–Ω–µ—Ç —Å client_id {client_uuid} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        new_client = Client(
            client_id=client_uuid,  # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UUID –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            name=name,
            user_id=tg_id,
            cookies=cookies
        )

        session.add(new_client)
        logger.info(f"‚úÖ –ö–∞–±–∏–Ω–µ—Ç {name} (client_id: {client_uuid}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")

    @session_manager
    async def get_client_by_name(self, session, tg_id: int, name: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await session.execute(
            select(Client).where(Client.name == name, Client.user_id == tg_id)
        )
        return result.scalars().first()

    @session_manager
    async def get_clients_by_user_id(self, session, tg_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await session.execute(
            select(Client).where(Client.user_id == tg_id)
        )
        clients = result.scalars().all()

        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(clients)} –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
        return clients

    @session_manager
    async def get_supplies_by_client(self, session, user_id: int, client_id: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å API –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î"""

        logger.info(f"üìå –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫: user_id={user_id}, client_id={client_id}")

        try:
            client_uuid = uuid.UUID(client_id)
        except ValueError:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π client_id: {client_id}")
            return []

        result = await session.execute(
            select(Client).where(Client.client_id == client_uuid, Client.user_id == user_id)
        )
        client = result.scalars().first()

        if not client:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —Å–≤–æ–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ({client_id})!")
            return []

        # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î
        db_supplies = await session.execute(
            select(Supply)
            .options(joinedload(Supply.client), joinedload(Supply.user))
            .where(Supply.client_id == client_uuid)
        )
        db_supplies = {str(s.id): s for s in db_supplies.scalars().all()}

        # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ API
        supplies, api_error = await fetch_supplies_from_api(self.BASE_URL, client_uuid)

        if api_error:
            logger.error(api_error)
            return [s.to_dict() for s in db_supplies.values()]

        logger.info(f"üì¶ JSON –æ—Ç–≤–µ—Ç–∞ API: {supplies}")

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞–≤–æ–∫ –∏–∑ API –∏ –ë–î
        api_supply_ids = {str(s.get("supplyId") or s.get("preorderId")) for s in supplies}
        db_supply_ids = set(db_supplies.keys())

        # ‚úÖ –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î –ø–æ—Å—Ç–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ API
        for supply_id in db_supply_ids - api_supply_ids:
            await session.delete(db_supplies[supply_id])
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞: {supply_id}")

        new_supplies = []
        for supply in supplies:
            supply_id = str(supply.get("supplyId") or supply.get("preorderId"))

            api_created_at = supply.get("createDate")
            if api_created_at:
                api_created_at = datetime.fromisoformat(api_created_at).replace(tzinfo=None)

            # ‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            warehouse_name = supply.get("warehouseName", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
            warehouse_address = supply.get("warehouseAddress", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å")
            box_type = supply.get("boxTypeName", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")

            if supply_id not in db_supply_ids:
                # ‚úÖ –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–∞—è, —Å—Ç–∞–≤–∏–º –µ–π —Å—Ç–∞—Ç—É—Å RECEIVED
                new_supplies.append(
                    Supply(
                        id=int(supply_id),
                        user_id=user_id,
                        client_id=client_uuid,
                        status=Status.RECEIVED.value,  # –í—Å–µ–≥–¥–∞ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å "RECEIVED"
                        api_created_at=api_created_at,
                        warehouse_name=warehouse_name,
                        warehouse_address=warehouse_address,
                        box_type=box_type,
                    )
                )
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ {supply_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º RECEIVED")
            else:
                # ‚úÖ –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–Ω–æ –Ω–µ —Å—Ç–∞—Ç—É—Å)
                existing_supply = db_supplies[supply_id]
                if not existing_supply.api_created_at and api_created_at:
                    existing_supply.api_created_at = api_created_at
                existing_supply.warehouse_name = warehouse_name
                existing_supply.warehouse_address = warehouse_address
                existing_supply.box_type = box_type
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–µ {supply_id}, —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

        session.add_all(new_supplies)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫: {len(new_supplies)}")

        return [
            {
                "id": s.id,
                "user_id": s.user_id,
                "client_id": str(s.client_id),
                "status": s.status,  # –ë–µ—Ä—ë–º —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î, –Ω–µ –º–µ–Ω—è–µ–º –µ–≥–æ
                "created_at": s.created_at.isoformat() if s.created_at else None,
                "updated_at": s.updated_at.isoformat() if s.updated_at else None,
                "api_created_at": s.api_created_at.isoformat() if s.api_created_at else None,
                "warehouse_name": s.warehouse_name,
                "warehouse_address": s.warehouse_address,
                "box_type": s.box_type,
                "client_name": s.client.name if s.client else None,
                "user_name": s.user.username if s.user else None,
            }
            for s in list(db_supplies.values()) + new_supplies
        ]

    @session_manager
    async def register_user(self, session, tg_id: int, username: str | None):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API –∏ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalars().first()

        if user:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
            return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –ë–î
        async with aiohttp.ClientSession() as client:
            try:
                url = f"{self.BASE_URL}/catcher/register/user"
                async with client.post(url, params={"tg_id": tg_id}) as response:
                    response_json = await response.json()

                    if response.status == 200:
                        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ API")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response_json}")
                        return {
                            "error": "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start"
                        }

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}", exc_info=True)
                return {
                    "error": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start"
                }

        # ‚úÖ –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ API —É—Å–ø–µ—à–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        new_user = User(
            tg_id=tg_id,
            username=username if username else "unknown"
        )
        session.add(new_user)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} ({new_user.username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")

        return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"}

    @session_manager
    async def register_client(self, session, tg_id: int, name: str, cookies: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É"""

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_client = await self.get_client_by_name(tg_id, name)
        if existing_client:
            logger.info(f"‚ö†Ô∏è –ö–∞–±–∏–Ω–µ—Ç {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
            return {"error": "–ö–∞–±–∏–Ω–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}

        # ‚úÖ –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è `client_id`
        async with aiohttp.ClientSession() as client:
            try:
                url = f"{self.BASE_URL}/catcher/register/client"
                async with client.post(url, params={"user_id": tg_id, "name": name, "cookies": cookies}) as response:
                    api_response = await response.json()

                    if response.status == 200:
                        client_id = api_response["client_id"]
                        logger.info(f"‚úÖ API –≤–µ—Ä–Ω—É–ª client_id: {client_id}")

                        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
                        await self.add_client(tg_id=tg_id, client_id=client_id, name=name, cookies=cookies)

                        return {"message": "–ö–∞–±–∏–Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "client_id": client_id}

                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {api_response}")
                        return {"error": api_response.get("detail", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")}

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}", exc_info=True)
                return {"error": "–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}

    @session_manager
    async def confirm_supply_catching(
            self, session, supply_id: int, start_date: str, end_date: str, skip_dates: list, coefficient: float
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–∞–≤–∫–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–ª–æ–≤–∞"""

        result = await session.execute(select(Supply).where(Supply.id == int(supply_id)))
        supply = result.scalars().first()

        if not supply:
            logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤–∫–∞ —Å ID {supply_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return {"error": f"–ü–æ—Å—Ç–∞–≤–∫–∞ —Å ID {supply_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"}

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime –æ–±—ä–µ–∫—Ç—ã
        try:
            start_dt = datetime.fromisoformat(start_date)
            end_dt = datetime.fromisoformat(end_date)
            skip_dt_list = [datetime.fromisoformat(d) for d in skip_dates]
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç: {e}"}

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        supply.status = Status.CATCHING.value
        supply.start_catch_date = start_dt
        supply.end_catch_date = end_dt
        supply.skip_dates = skip_dt_list
        supply.coefficient = coefficient

        logger.info(
            f"‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: —Å—Ç–∞—Ç—É—Å={supply.status}, "
            f"start_catch_date={start_dt}, end_catch_date={end_dt}, "
            f"skip_dates={skip_dt_list}, coefficient={coefficient}"
        )

        return {"message": f"–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ç–ª–æ–≤"}

    @session_manager
    async def get_supply_by_id(self, session, supply_id: str):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É –ø–æ ID"""
        result = await session.execute(select(Supply).where(Supply.id == int(supply_id)))
        return result.scalars().first()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É (–∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)


