import logging
from sqlalchemy import inspect, text, select
import aiohttp

from database.entities.core import Base, Database
from database.entities.models import User
from database.entities.models import Client
from datetime import datetime, timezone


logger = logging.getLogger(__name__)

def session_manager(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π"""
    async def wrapper(self, *args, **kwargs):
        async with self.db.session() as session:  # ‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            async with session.begin():  # ‚úÖ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                try:
                    result = await func(self, session, *args, **kwargs)  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º session –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    await session.commit()  # ‚úÖ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    logger.debug(f"‚úÖ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return result
                except Exception as e:
                    await session.rollback()  # ‚úÖ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
                    raise e
    return wrapper

class ORMController:
    BASE_URL = "https://goapimpwave.ru"  # –ë–∞–∑–æ–≤—ã–π URL API
    def __init__(self, db: Database = Database()):
        self.db = db
        logger.info("ORMController initialized")

    async def create_tables(self):
        async with self.db.async_engine.begin() as conn:

            def sync_inspect(connection):
                inspector = inspect(connection)
                return inspector.get_table_names()

            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db.async_engine.url.database}")

            # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É `public`
            await conn.run_sync(lambda c: c.execute(text("SET search_path TO public")))

            existing_tables = await conn.run_sync(sync_inspect)
            logger.info(f"üìå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

            found_metadata_tables = list(Base.metadata.tables.keys())
            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ metadata: {found_metadata_tables}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –Ω–æ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            if existing_tables and set(existing_tables) != set(found_metadata_tables):
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö! –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")

                # ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
                await conn.run_sync(Base.metadata.drop_all)
                logger.info("üóëÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã!")

                # ‚úÖ –°–æ–∑–¥–∞–µ–º –∏—Ö –∑–∞–Ω–æ–≤–æ
                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")

            elif not existing_tables:
                logger.info("üîß –¢–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö...")
                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            else:
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    @session_manager
    async def add_user(self, session, tg_id: int, username: str | None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç"""
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalars().first()

        if not user:
            new_user = User(
                tg_id=tg_id,
                username=username if username else "unknown",
                created_at=datetime.now(timezone.utc).replace(tzinfo=None)
            )
            session.add(new_user)
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tg_id} ({new_user.username})")
        else:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    @session_manager
    async def add_client(self, session, tg_id: int, name: str, cookies: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        result = await session.execute(select(Client).where(Client.name == name))
        existing_client = result.scalars().first()

        if existing_client:
            logger.info(f"‚ö†Ô∏è –ö–∞–±–∏–Ω–µ—Ç —Å client_id {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        new_client = Client(
            name=name,
            user_id=tg_id,
            cookies=cookies,
            created_at=datetime.now(timezone.utc).replace(tzinfo=None)  # ‚úÖ –£–±–∏—Ä–∞–µ–º `tzinfo`
        )

        session.add(new_client)
        logger.info(f"‚úÖ –ö–∞–±–∏–Ω–µ—Ç {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")

    @session_manager
    async def get_client_by_name(self, session, tg_id: int, name: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await session.execute(
            select(Client).where(Client.name == name, Client.user_id == tg_id)
        )
        return result.scalars().first()

    @session_manager
    async def get_clients_by_user_id(self, session, tg_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await session.execute(
            select(Client).where(Client.user_id == tg_id)
        )
        clients = result.scalars().all()

        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(clients)} –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
        return clients

    @session_manager
    async def get_supplies_by_client(self, session, user_id: int, client_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (client_id), –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ user_id"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result = await session.execute(
            select(Client).where(Client.client_id == client_id, Client.user_id == user_id)
        )
        client = result.scalars().first()

        if not client:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —Å–≤–æ–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ({client_id})!")
            return []

        # –ó–∞–ø—Ä–æ—Å –∫ API
        url = f"{self.BASE_URL}/catcher/all_supplies"
        params = {"client_id": client_id}

        async with aiohttp.ClientSession() as http_session:
            try:
                async with http_session.get(url, params=params) as response:
                    if response.status == 200:
                        supplies = await response.json()

                        # üî• –õ–æ–≥–∏—Ä—É–µ–º JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        logger.info(f"üì¶ JSON –æ—Ç–≤–µ—Ç–∞ API: {supplies}")

                        return supplies
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: {response.status}")
                        return []
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫: {e}", exc_info=True)
                return []
