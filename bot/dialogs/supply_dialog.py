from datetime import date

from aiogram_dialog import Dialog, Window, ShowMode
from aiogram_dialog.widgets.kbd import Select, Button, ScrollingGroup, Back, Calendar
from aiogram_dialog.widgets.text import Jinja, Format, Const
from aiogram_dialog import DialogManager
from aiogram.types import CallbackQuery

from database.controller.orm_instance import get_orm
from bot.utils.statesform import SupplyStates
from database.enums import Status
from services.utils.logger import setup_logger
from services.utils.mpwave_api import MPWAVEAPI

logger = setup_logger(__name__)
mpwave_api = MPWAVEAPI()
orm_controller = get_orm()

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def on_action_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    if item_id == "cancel":
        await cancel_catch(manager)
    elif item_id == "edit":
        await manager.switch_to(SupplyStates.CHOOSE_COEFFICIENT, show_mode=ShowMode.EDIT)
    else:
        await manager.switch_to(SupplyStates.CHOOSE_COEFFICIENT, show_mode=ShowMode.EDIT)

async def cancel_catch(manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–ª–æ–≤–∞"""
    supply_id = int(manager.dialog_data["selected_supply"])
    client_id = manager.dialog_data["selected_client"]
    manager.dialog_data["force_reload"] = True

    #TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ MPWAVE_API –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç

    await mpwave_api.cancel_task_api(client_id, supply_id)

    # result = await orm_controller.cancel_catching(client_id=client_id, supply_id=supply_id)
    #
    # if "error" in result:
    #     await manager.event.message.answer(f"‚ùå {result['error']}")
    # else:
    #     await manager.event.message.answer(f"‚úÖ {result['message']}")

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for key in ("selected_supply", "start_date", "end_date", "skip_dates", "coefficient", "is_catching"):
        manager.dialog_data.pop(key, None)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
    manager.dialog_data["force_reload"] = True
    await manager.done(show_mode=ShowMode.DELETE_AND_SEND)

async def get_supply_options(dialog_manager: DialogManager, **kwargs):
    supply_id = dialog_manager.start_data.get("supply_id")
    client_id = dialog_manager.start_data.get("client_id")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ dialog_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    dialog_manager.dialog_data["selected_supply"] = supply_id
    dialog_manager.dialog_data["selected_client"] = client_id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    supply = await orm_controller.supply.get_supply_by_id(supply_id)
    is_catching = False
    if supply:
        is_catching = supply.status == Status.CATCHING
        dialog_manager.dialog_data["is_catching"] = is_catching

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}. –°—Ç–∞—Ç—É—Å is_catching: {is_catching}")

    buttons = []
    if is_catching:
        buttons.append(("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ª–æ–≤", "cancel"))
        buttons.append(("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "edit"))
    else:
        buttons.append(("üìå –í–∑—è—Ç—å –Ω–∞ –æ—Ç–ª–æ–≤", "catch"))

    return {"options": buttons, "supply_id": supply_id}

async def on_coefficient_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    manager.dialog_data["coefficient"] = int(item_id)
    await manager.switch_to(SupplyStates.CHOOSE_START_DATE, show_mode=ShowMode.EDIT)
    
async def on_date_selected(callback: CallbackQuery, widget, manager: DialogManager, selected_date: date):
    state = manager.current_context().state
    selected_str = selected_date.strftime("%Y-%m-%d")

    if state == SupplyStates.CHOOSE_START_DATE:
        manager.dialog_data["start_date"] = selected_str
        await manager.switch_to(SupplyStates.CHOOSE_END_DATE, show_mode=ShowMode.EDIT)

    elif state == SupplyStates.CHOOSE_END_DATE:
        manager.dialog_data["end_date"] = selected_str
        await manager.switch_to(SupplyStates.CHOOSE_SKIP_DATES, show_mode=ShowMode.EDIT)

    elif state == SupplyStates.CHOOSE_SKIP_DATES:
        skip_dates = manager.dialog_data.get("skip_dates", [])
        if selected_str in skip_dates:
            skip_dates.remove(selected_str)
        else:
            skip_dates.append(selected_str)
        manager.dialog_data["skip_dates"] = skip_dates

        # –û–±–Ω–æ–≤–∏–º –æ–∫–Ω–æ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç `{skip_dates}` –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
        await manager.show()
        
async def get_start_date(dialog_manager: DialogManager, **kwargs):
    return {"start_date": dialog_manager.dialog_data.get("start_date", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")}

async def get_end_date(dialog_manager: DialogManager, **kwargs):
    return {"end_date": dialog_manager.dialog_data.get("end_date", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")}

async def get_skip_dates(dialog_manager: DialogManager, **kwargs):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"""
    return {"skip_dates": dialog_manager.dialog_data.get("skip_dates", [])}

async def on_confirm(callback: CallbackQuery, button, manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ª–æ–≤–∞"""
    supply_id = int(manager.dialog_data["selected_supply"])
    start_date = manager.dialog_data["start_date"]
    end_date = manager.dialog_data["end_date"]
    skip_dates = manager.dialog_data.get("skip_dates", [])
    coefficient = manager.dialog_data["coefficient"]
    manager.dialog_data["force_reload"] = True

    #TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ MPWAVE_API –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ª–æ–≤–∞ –∏ –æ–±—Ä–∞—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    data = {
        "supply_id": supply_id,
        "start_date": start_date.isoformat(),
        "end_date": end_date.isoformat(),
        "skip_dates": [d.isoformat() for d in skip_dates],
        "coefficient": coefficient
    }

    await mpwave_api.start_task_api(data)

    # result = await orm_controller.confirm_supply_catching(
    #     supply_id=supply_id,
    #     start_date=start_date,
    #     end_date=end_date,
    #     skip_dates=skip_dates,
    #     coefficient=coefficient
    # )

    # if "error" in result:
    #     await callback.message.answer(f"‚ùå {result['error']}")
    # else:
    #     await callback.message.answer(f"‚úÖ {result['message']}")

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for key in ("selected_supply", "start_date", "end_date", "skip_dates", "coefficient", "is_catching"):
        manager.dialog_data.pop(key, None)

    manager.dialog_data["force_reload"] = True
    await manager.done(show_mode=ShowMode.DELETE_AND_SEND)
    
async def get_confirm_data(dialog_manager: DialogManager, **kwargs):
    return {
        "supply_id": dialog_manager.dialog_data.get("selected_supply", "‚ùå"),
        "start_date": dialog_manager.dialog_data.get("start_date", "‚ùå"),
        "end_date": dialog_manager.dialog_data.get("end_date", "‚ùå"),
        "coefficient": dialog_manager.dialog_data.get("coefficient", "‚ùå"),
        "skip_dates": ", ".join(dialog_manager.dialog_data.get("skip_dates", [])) or "‚Äî"
    }

supply_dialog = Dialog(
Window(
        Format("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}:"),
        Select(
            text=Format("{item[0]}"),
            items="options",
            id="supply_action",
            item_id_getter=lambda x: x[1],
            on_click=on_action_selected,
        ),
        Button(
            Jinja("üîô –ù–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, b, d: d.done(show_mode=ShowMode.EDIT),
        ),
        state=SupplyStates.CHOOSE_SUPPLY_ACTION,
        getter=get_supply_options,
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–æ–≤–∞.\n\n"
              "–ë–æ—Ç –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ:"),
        # üîò –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (0-20)
        ScrollingGroup(
            Select(
                text=Format("{item}"),
                id="select_coefficient",
                item_id_getter=lambda x: str(x),
                items=list(range(0, 21)),
                on_click=on_coefficient_selected,
            ),
            id="coefficient_scroll",
            width=5,  # ‚úÖ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
            height=4,  # ‚úÖ 4 —Å—Ç—Ä–æ–∫–∏ (–≤—Å–µ–≥–æ 20 –∫–Ω–æ–ø–æ–∫)
        ),

        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=SupplyStates.CHOOSE_COEFFICIENT,
    ),
    Window(
        Format("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞: –¢–µ–∫—É—â–∞—è: {start_date}"),
        Calendar(id="start_date", on_click=on_date_selected),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=SupplyStates.CHOOSE_START_DATE,
        getter=get_start_date,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π getter
    ),
    Window(
        Format("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è: –¢–µ–∫—É—â–∞—è: {end_date}"),
        Calendar(id="end_date", on_click=on_date_selected),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=SupplyStates.CHOOSE_END_DATE,
        getter=get_end_date,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π getter
    ),
    Window(
        Format("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å: –¢–µ–∫—É—â–∏–µ: {skip_dates}"),
        Calendar(id="skip_dates", on_click=on_date_selected),
        Button(Const("‚è≠ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="skip", on_click=lambda c, b, d: d.switch_to(SupplyStates.CONFIRM, show_mode=ShowMode.EDIT)),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=SupplyStates.CHOOSE_SKIP_DATES,
        getter=get_skip_dates,  # ‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º skip_dates, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
    ),
    Window(
        Jinja(
            "<b>üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            "üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: <code>{{ supply_id }}</code>\n"
            "‚öôÔ∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>{{ coefficient }}</b>\n"
            "üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{{ start_date }}</b>\n"
            "üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{{ end_date }}</b>\n"
            "‚õî –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã: <b>{{ skip_dates }}</b>\n\n"
            "‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ?"
        ),
        Button(Const("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm", on_click=on_confirm),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=SupplyStates.CONFIRM,
        getter=get_confirm_data,
        parse_mode="HTML",
    )
)