import json
import logging

from aiogram_dialog import Dialog, Window, ShowMode
from aiogram_dialog.widgets.kbd import Button, Row, Column
from aiogram_dialog.widgets.text import Jinja, Const
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput
from aiogram_dialog import DialogManager
from aiogram.types import Message, CallbackQuery

from bot.utils.statesform import AddClientStates, MainMenu
from database.controller.ORM import ORMController
from bot.utils.wildberries_api import WildberriesAPI

orm_controller = ORMController()
wb_api = WildberriesAPI()
logger = logging.getLogger(__name__)

async def on_choose_cookies(c, w, m):
    await m.switch_to(AddClientStates.ENTER_NAME, show_mode=ShowMode.EDIT)

async def on_choose_phone(c, w, m):
    await m.switch_to(AddClientStates.ENTER_PHONE, show_mode=ShowMode.EDIT)

async def get_client_data(dialog_manager: DialogManager, **kwargs):
    """–ü–µ—Ä–µ–¥–∞—á–∞ –∏–º–µ–Ω–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ Cookies –≤ —à–∞–±–ª–æ–Ω"""
    return {
        "client_name": dialog_manager.find("client_name").get_value() or "–ë–µ–∑ –∏–º–µ–Ω–∏",
        "cookies": dialog_manager.find("cookies").get_value() or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    }

async def go_to_next_step(message: Message, widget, manager: DialogManager, value: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"""
    await manager.next(show_mode=ShowMode.DELETE_AND_SEND)

async def confirm_client_data(callback: CallbackQuery, widget, manager: DialogManager):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î."""

    tg_id = callback.from_user.id
    name = manager.find("client_name").get_value() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    cookies = manager.find("cookies").get_value() or "{}"

    # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º ORM-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
    result = await orm_controller.register_client(tg_id, name, cookies)

    if "error" in result:
        await callback.message.answer(f"‚ùå {result['error']}", parse_mode="HTML")
    else:
        client_id = result["client_id"]
        await callback.message.answer(
            f"‚úÖ –ö–∞–±–∏–Ω–µ—Ç <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ\n"
            f"üîë <b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> {client_id}",
            parse_mode="HTML"
        )

    await manager.done(show_mode=ShowMode.DELETE_AND_SEND)

async def on_sms_code_entered(message: Message, widget, manager: DialogManager, value: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ SMS-–∫–æ–¥–∞, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Wildberries –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    sms_code = value.strip()
    phone = manager.dialog_data.get("phone_number")

    # ‚õî –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç API –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω
    api: WildberriesAPI = manager.dialog_data.get("api")
    if not api:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await manager.done(show_mode=ShowMode.DELETE_AND_SEND)
        return

    try:
        # üîê –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        api.authorize(sms_code)

        # üíæ –ü–æ–ª—É—á–∞–µ–º cookies –∏–∑ —Å–µ—Å—Å–∏–∏
        cookies_dict = api.session.cookies.get_dict()
        cookies_json = json.dumps(cookies_dict)

        # üìõ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–æ –Ω–æ–º–µ—Ä—É
        name = f"–ö–ª–∏–µ–Ω—Ç {phone[-4:]}" if phone else "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"
        tg_id = message.from_user.id

        # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ ORM
        result = await orm_controller.register_client(tg_id, name, cookies_json)

        if "error" in result:
            await message.answer(f"‚ùå {result['error']}")
        else:
            await message.answer(
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É <b>{phone}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"üîë ID: <code>{result['client_id']}</code>",
                parse_mode="HTML"
            )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

    await manager.done(show_mode=ShowMode.DELETE_AND_SEND)

async def get_phone_number(d, **kwargs):
    return {"phone_number": d.dialog_data.get("phone_number", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")}

#____________________________
async def on_phone_entered(
    message: Message,
    widget: ManagedTextInput[str],
    dialog_manager: DialogManager,
    phone: str,
):
    logger.info(f"üìû –í–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
    dialog_manager.dialog_data["phone_number"] = phone

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ dialog_data
    api = WildberriesAPI(phone_number=phone)
    dialog_manager.dialog_data["api"] = api

    logger.info("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ SMS-–∫–æ–¥–∞...")

    try:
        success = api.send_code()
        if success:
            logger.info("‚úÖ SMS-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            await dialog_manager.switch_to(AddClientStates.ENTER_SMS_CODE)
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –û—Ç–≤–µ—Ç –Ω–µ OK.")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS-–∫–æ–¥–∞")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")


async def on_phone_error(
    message: Message,
    widget: ManagedTextInput[str],
    dialog_manager: DialogManager,
    error: ValueError,
):
    logger.warning("üö´ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567")


add_client_dialog = Dialog(
    Window(
        Jinja(
            "üëã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
            "üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
            "–í—ã –≤–≤–µ–¥—ë—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –ø–æ–ª—É—á–∏—Ç–µ SMS-–∫–æ–¥ –æ—Ç Wildberries, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n\n"
            "üì≤ <b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b>"
        ),
        Column(
            Button(Const("‚û°Ô∏è –ù–∞—á–∞—Ç—å"), id="start_phone_flow",
                   on_click=lambda c, w, m: m.switch_to(AddClientStates.ENTER_PHONE)),
            Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.start(MainMenu.MAIN_MENU)),
        ),
        state=AddClientStates.ENTRY_METHOD,
        parse_mode="HTML",
    ),
    Window(
        Const("üìû <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n"
              "<code>+79991234567</code>\n"
              "üì© <i>–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ –Ω–µ–≥–æ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>"),
        TextInput(
            id="phone_number",
            type_factory=str,  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            on_success=on_phone_entered,
            on_error=on_phone_error,
        ),
        Row(
            Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to(AddClientStates.ENTRY_METHOD)),
        ),
        state=AddClientStates.ENTER_PHONE,
        parse_mode="HTML",
    ),
    # –®–∞–≥ 2: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è + –í–≤–æ–¥ Cookies
    Window(
        Jinja(
            "üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞</b>\n\n"
            "üìå –ö–∞–±–∏–Ω–µ—Ç: <b>{{ client_name }}</b>\n\n"
            "üìú <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Cookies?</b>\n\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ <b>Cookie-Editor</b> –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞.\n"
            "2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∫–∞–±–∏–Ω–µ—Ç–µ WB.\n"
            "3Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ <b>Cookie-Editor</b>, –Ω–∞–π–¥–∏—Ç–µ <code>WBToken</code> –∏ <code>WBAuth</code>.\n"
            "4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>{\"WBToken\": \"–≤–∞—à_—Ç–æ–∫–µ–Ω\", \"WBAuth\": \"–≤–∞—à_—Ç–æ–∫–µ–Ω\"}</code>\n\n"
            "‚úèÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ Cookies –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.</i>"
        ),
        TextInput(
            id="cookies",
            on_success=go_to_next_step,
        ),
        Row(
            Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to(AddClientStates.ENTER_NAME, show_mode=ShowMode.EDIT)),
        ),
        state=AddClientStates.ENTER_COOKIES,
        getter=get_client_data,
        parse_mode="HTML",
    ),

    # –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    Window(
        Jinja(
            "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "üìå <b>–ö–∞–±–∏–Ω–µ—Ç:</b> {{ client_name }}\n"
            "üîë <b>Cookies:</b> <code>{{ cookies }}</code>\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?"
        ),
        Row(
            Button(Jinja("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm", on_click=confirm_client_data),
            Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to(AddClientStates.ENTER_COOKIES, show_mode=ShowMode.EDIT)),
        ),
        state=AddClientStates.CONFIRMATION,
        getter=get_client_data,
        parse_mode="HTML",
    ),
    Window(
        Jinja(
            "üì± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
            "üìû <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
            "<code>+79991234567</code>\n"
            "‚úèÔ∏è <i>–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</i>"
        ),
        TextInput(
            id="phone_number",
            on_success=on_phone_entered,
        ),
        Row(
            Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to(AddClientStates.ENTRY_METHOD)),
        ),
        state=AddClientStates.ENTER_PHONE,
        parse_mode="HTML",
    ),
    Window(
        Jinja(
            "üì≤ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS</b>\n\n"
            "üí¨ –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä <b>{{ phone_number }}</b>\n"
            "‚úèÔ∏è <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</i>"
        ),
        TextInput(
            id="sms_code",
            on_success=on_sms_code_entered,
        ),
        Row(
            Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to(AddClientStates.ENTER_PHONE)),
        ),
        state=AddClientStates.ENTER_SMS_CODE,
        parse_mode="HTML",
        getter=get_phone_number,
    )
)
