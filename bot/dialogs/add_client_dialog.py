import logging
import operator
import aiohttp

from aiogram_dialog import Dialog, Window, ShowMode
from aiogram_dialog.widgets.kbd import Button, Row, Column, Multiselect, ScrollingGroup, ManagedMultiselect
from aiogram_dialog.widgets.text import Jinja, Const, Format
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput
from aiogram_dialog import DialogManager
from aiogram.types import Message, CallbackQuery

from bot.utils.statesform import AddClientStates, MainMenu
from database.controller.ORM import ORMController
from bot.utils.wildberries_api import WildberriesAPI
from bot.utils.validations import normalize_phone_number

orm_controller = ORMController()
logger = logging.getLogger(__name__)

#____________________________
async def on_phone_entered(
    message: Message,
    widget: ManagedTextInput[str],
    dialog_manager: DialogManager,
    phone: str,
):
    phone = normalize_phone_number(phone)
    logger.info(f"üìû –í–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
    dialog_manager.dialog_data["phone_number"] = phone
    logger.info("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ SMS-–∫–æ–¥–∞...")

    try:
        api = WildberriesAPI(phone_number=phone)
        success, error_msg = api.send_code()
        if success:
            dialog_manager.dialog_data["phone_number"] = phone
            dialog_manager.dialog_data["sticker"] = api.sticker  # üî• —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ sticker
            await dialog_manager.switch_to(AddClientStates.ENTER_SMS_CODE, show_mode=ShowMode.DELETE_AND_SEND)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥: {error_msg}")
            await message.answer(error_msg)
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS-–∫–æ–¥–∞")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")

async def on_phone_error(
    message: Message,
    widget: ManagedTextInput[str],
    dialog_manager: DialogManager,
    error: ValueError,
):
    logger.warning("üö´ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567")

async def on_sms_code_entered(
        message: Message,
        widget: ManagedTextInput[str],
        dialog_manager: DialogManager,
        code: str):
    logger.info(f"üì® –í–≤–µ–¥—ë–Ω SMS-–∫–æ–¥: {code}")

    phone = dialog_manager.dialog_data.get("phone_number")
    sticker = dialog_manager.dialog_data.get("sticker")

    if not phone or not sticker:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    api = WildberriesAPI(phone_number=phone)
    api.sticker = sticker

    try:
        result = api.authorize(code)

        cookies_dict = result["cookies"]
        access_token = result["json"]["payload"]["access_token"]
        validation_key = result["wbx_validation_key"]
        refresh_token = result["refresh_token"]

        cookie_string = f"WBTokenV3={access_token}"
        if validation_key:
            cookie_string += f";wbx-validation-key={validation_key}"
            dialog_manager.dialog_data["cookie_string"] = cookie_string
        if refresh_token:
            dialog_manager.dialog_data["refresh_token"] = refresh_token
        async with aiohttp.ClientSession() as session:
            api = WildberriesAPI()
            raw_suppliers = await api.get_suppliers(cookie_string, session)

            dialog_manager.dialog_data["raw_suppliers_response"] = raw_suppliers
            dialog_manager.dialog_data["suppliers_data"] = [
                (supplier["name"], supplier["id"])
                for supplier in raw_suppliers[0]["result"]["suppliers"]
            ]

        await dialog_manager.switch_to(AddClientStates.SELECT_CLIENTS, show_mode=ShowMode.DELETE_AND_SEND)
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

async def on_sms_code_error(
    message: Message,
    widget: ManagedTextInput[str],
    dialog_manager: DialogManager,
    error: ValueError,
):
    logger.warning("üö´ –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞")
    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    await dialog_manager.switch_to(AddClientStates.ENTER_PHONE, show_mode=ShowMode.DELETE_AND_SEND)

async def get_suppliers_data(dialog_manager: DialogManager, **kwargs):
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ dialog_manager –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ kwargs
    raw_data = dialog_manager.dialog_data.get("raw_suppliers_response")

    suppliers_raw = raw_data[0]["result"]["suppliers"]
    suppliers = [(supplier["name"], supplier["id"]) for supplier in suppliers_raw]

    return {
        "suppliers": suppliers,
        "count": len(suppliers),
    }

async def on_add_selected(callback: CallbackQuery, button: Button, manager: DialogManager):
    try:
        multiselect: ManagedMultiselect = manager.find("m_suppliers")
        selected_ids = multiselect.get_checked()

        tg_id = callback.from_user.id
        suppliers_data = manager.dialog_data.get("suppliers_data", [])
        if not selected_ids:
            await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.")
            return

        cookie_string = manager.dialog_data.get("cookie_string")
        refresh_token = manager.dialog_data.get("refresh_token")
        if not cookie_string:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç cookie_string.")
            return

        await register_suppliers(selected_ids, cookie_string, tg_id, suppliers_data, refresh_token)
        await callback.message.answer("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await manager.start(state=MainMenu.MAIN_MENU, show_mode=ShowMode.DELETE_AND_SEND)

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def on_add_all(callback: CallbackQuery, button: Button, manager: DialogManager):
    try:
        suppliers = manager.dialog_data.get("suppliers_data", [])
        if not suppliers:
            await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø—É—Å—Ç.")
            return

        all_ids = [s[1] for s in suppliers]
        cookie_string = manager.dialog_data.get("cookie_string")
        refresh_token = manager.dialog_data.get("refresh_token")
        if not cookie_string:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç cookie_string.")
            return

        tg_id = callback.from_user.id

        await register_suppliers(all_ids, cookie_string, tg_id, suppliers, refresh_token)
        await callback.message.answer("‚úÖ –í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await manager.start(state=MainMenu.MAIN_MENU, show_mode=ShowMode.DELETE_AND_SEND)

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def register_suppliers(
    selected_ids: list[str],
    base_cookie: str,
    tg_id: int,
    suppliers_data: list[tuple[str, str]],
    refresh_token: str,
    ):
    for supplier_id in selected_ids:
        name = next((n for n, sid in suppliers_data if sid == supplier_id), None)
        if not name:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}")
            continue

        # üëá –î–æ–ø–æ–ª–Ω—è–µ–º –∫—É–∫–∏
        supplier_cookie = (
            f"{base_cookie};"
            f"x-supplier-id={supplier_id};"
            f"x-supplier-id-external={supplier_id}"
        )

        logger.info(f"üì¶ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_id} ({name})")
        logger.debug(f"üîê –ü–æ–ª–Ω—ã–π cookie_string: {supplier_cookie}")

        await orm_controller.register_client(
            tg_id=tg_id,
            client_id=supplier_id,
            name=name,
            cookies=supplier_cookie,
            refresh_token=refresh_token,
        )

add_client_dialog = Dialog(
    Window(
        Jinja(
            "üëã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
            "üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
            "–í—ã –≤–≤–µ–¥—ë—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –ø–æ–ª—É—á–∏—Ç–µ SMS-–∫–æ–¥ –æ—Ç Wildberries, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n\n"
            "üì≤ <b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b>"
        ),
        Column(
            Button(Const("‚û°Ô∏è –ù–∞—á–∞—Ç—å"), id="start_phone_flow",
                   on_click=lambda c, w, m: m.switch_to(AddClientStates.ENTER_PHONE, show_mode=ShowMode.EDIT)),
            Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.start(MainMenu.MAIN_MENU)),
        ),
        state=AddClientStates.ENTRY_METHOD,
        parse_mode="HTML",
    ),
    Window(
        Const("üìû <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n"
              "<code>+79991234567</code>\n"
              "üì© <i>–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ –Ω–µ–≥–æ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>"),
        TextInput(
            id="phone_number",
            type_factory=str,  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            on_success=on_phone_entered,
            on_error=on_phone_error,
        ),
        Row(
            Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to(AddClientStates.ENTRY_METHOD, show_mode=ShowMode.EDIT)),
        ),
        state=AddClientStates.ENTER_PHONE,
        parse_mode="HTML",
    ),
    Window(
        Jinja(
            "üì≤ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS –æ—Ç WildBerries –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        ),
        TextInput(
            id="sms_code",
            type_factory=str,
            on_success=on_sms_code_entered,
            on_error=on_sms_code_error,
        ),
        Row(
            Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to(AddClientStates.ENTER_PHONE, show_mode=ShowMode.EDIT)),
        ),
        state=AddClientStates.ENTER_SMS_CODE,
        parse_mode="HTML",
    ),
    Window(
        Const("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö'"),
        ScrollingGroup(
            Multiselect(
                checked_text=Format("‚úì {item[0]}"),
                unchecked_text=Format("{item[0]}"),
                id="m_suppliers",
                item_id_getter=operator.itemgetter(1),
                items="suppliers",
            ),
            id="suppliers_scroll",
            width=1,
            height=5,
        ),
        Row(
            Button(Const("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"), id="add_selected", on_click=on_add_selected),
            Button(Const("üìã –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö"), id="add_all", on_click=on_add_all),
        ),
        Row(
            Button(Const("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="to_main", on_click=lambda c, w, m: m.start(MainMenu.MAIN_MENU)),
        ),
        state=AddClientStates.SELECT_CLIENTS,
        getter=get_suppliers_data,
        parse_mode="HTML",
    )
)
