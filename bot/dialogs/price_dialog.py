from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Button, Row, Column, Select, Url
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput
from aiogram_dialog.widgets.text import Jinja, Const
from aiogram.types import CallbackQuery, Message
from datetime import datetime, timedelta, UTC

from bot.utils.statesform import MainMenu, BalanceStates
from database import get_orm
from payments.client import TochkaAPIClient
from configurations.payments_config import PaymentsConfig

orm_controller = get_orm()
api = TochkaAPIClient(PaymentsConfig())

# --- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ---
async def get_balance_data(dialog_manager: DialogManager, **kwargs):
    tg_id = dialog_manager.event.from_user.id
    balance = await orm_controller.balance.get_balance(tg_id)
    return {
        "balance": balance,
        "payment_link": dialog_manager.dialog_data.get("payment_link"),
        "amount": dialog_manager.dialog_data.get("amount")
    }

amount_options = [("1 000‚ÇΩ", "1000"), ("5 000‚ÇΩ", "5000"), ("25 000‚ÇΩ", "25000")]

async def on_amount_selected(callback: CallbackQuery, widget, manager: DialogManager, amount: str):
    await create_payment_and_proceed(callback.from_user.id, amount, manager)

async def on_custom_amount_entered(
    message: Message,
    widget: ManagedTextInput[str],
    dialog_manager: DialogManager,
    value: str,
):
    if not value.isdigit() or int(value) < 100:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 100‚ÇΩ", show_alert=True)
        return
    await create_payment_and_proceed(message.from_user.id, value, dialog_manager)

async def create_payment_and_proceed(user_id: int, amount: str, manager: DialogManager):
    config = PaymentsConfig()
    payload = {
        "customerCode": config.get_customer_code(),
        "amount": amount,
        "purpose": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Telegram ID {user_id}",
        "redirectUrl": "https://example.com/success",
        "failRedirectUrl": "https://example.com/fail",
        "consumerId": config.get_consumer_id(),
        "merchantId": config.get_merchant_id(),
        "ttl": 60 * 24 * 7,
        "paymentMode": ["sbp", "card", "tinkoff"]
    }
    payment_link = await api.create_payment_link(payload)
    manager.dialog_data["payment_link"] = payment_link
    manager.dialog_data["amount"] = int(amount)
    await manager.switch_to(BalanceStates.SHOW_PAYMENT)

async def get_payment_link(dialog_manager: DialogManager, **kwargs):
    return {
        "payment_link": dialog_manager.dialog_data.get("payment_link"),
        "amount": dialog_manager.dialog_data.get("amount")
    }

async def on_check_payment(callback: CallbackQuery, button: Button, manager: DialogManager):
    operation_id = manager.dialog_data.get("payment_link").split("uuid=")[-1]
    status = await api.get_payment_status(operation_id)
    if status == "APPROVED":
        user_id = callback.from_user.id
        amount = manager.dialog_data.get("amount", 0)
        await orm_controller.balance.add_balance(user_id, amount)
        await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω")
        await manager.done()
    else:
        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)

async def on_cancel_payment(callback: CallbackQuery, button: Button, manager: DialogManager):
    manager.dialog_data.clear()
    await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await manager.back()

# --- –ü–æ–¥–ø–∏—Å–∫–∞ ---
async def on_subscribe_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_id = callback.from_user.id
    balance = await orm_controller.balance.get_balance(user_id)
    if balance < 25000:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        return
    await manager.switch_to(BalanceStates.CONFIRM_SUBSCRIPTION)

async def confirm_subscription(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_id = callback.from_user.id
    tariff_id = 1  # ID –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    now = datetime.now(UTC)
    end = now + timedelta(days=30)
    success = await orm_controller.balance.deduct_balance(user_id, 25000)
    if success:
        await orm_controller.create_subscription(user_id, tariff_id, now, end)
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", show_alert=True)
        await manager.done()
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", show_alert=True)

# --- –î–∏–∞–ª–æ–≥ ---
balance_dialog = Dialog(
    Window(
        Jinja("""
        üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{{ balance }}‚ÇΩ</code>

        üì¶ <b>–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª—É–≥–∏:</b>
        ‚Ä¢ üìÜ <b>–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> 25 000‚ÇΩ
        ‚Ä¢ üì¶ <b>–ö–æ—Ä–æ–±–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞:</b> 500‚ÇΩ
        ‚Ä¢ üèóÔ∏è <b>–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞:</b> 1 000‚ÇΩ

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """),
        Column(
            Button(Const("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), id="topup", on_click=lambda c, w, m: m.switch_to(BalanceStates.SELECT_AMOUNT)),
            Button(Const("üìÜ –ö—É–ø–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"), id="subscribe", on_click=on_subscribe_click),
            Button(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.start(MainMenu.MAIN_MENU)),
        ),
        state=BalanceStates.MAIN,
        getter=get_balance_data,
        parse_mode="HTML"
    ),
    Window(
        Jinja("""
        üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

        –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:
        """),
        Column(
            Select(
                text=Jinja("{{item[0]}}"),
                id="amount_select",
                item_id_getter=lambda x: x[1],
                items=amount_options,
                on_click=on_amount_selected
            ),
        ),
        TextInput(
            id="custom_amount",
            type_factory=str,
            on_success=on_custom_amount_entered
        ),
        state=BalanceStates.SELECT_AMOUNT
    ),
    Window(
        Jinja("<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> <code>{{ amount }}‚ÇΩ</code><b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>"),
        Column(
            Url(Const("üåê –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"), url=Jinja("{{ payment_link }}")),
            Button(Const("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É"), id="cancel_payment", on_click=on_cancel_payment),
            Button(Const("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"), id="check", on_click=on_check_payment),
        ),
        state=BalanceStates.SHOW_PAYMENT,
        getter=get_payment_link,
        parse_mode="HTML"
    ),
    Window(
        Const("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 25 000‚ÇΩ?"),
        Row(
            Button(Const("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm_sub", on_click=confirm_subscription),
            Button(Const("‚ùå –û—Ç–º–µ–Ω–∞"), id="cancel_sub", on_click=lambda c, w, m: m.back()),
        ),
        state=BalanceStates.CONFIRM_SUBSCRIPTION
    )
)
