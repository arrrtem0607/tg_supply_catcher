import operator
import logging

from aiogram import types
from aiogram_dialog import Dialog, Window, ShowMode, StartMode, DialogManager
from aiogram_dialog.widgets.kbd import Select, Button, ScrollingGroup
from aiogram_dialog.widgets.text import Jinja, List, Format, Const
from aiogram_dialog.widgets.input import TextInput
from aiogram.types import CallbackQuery

from database.controller.ORM import ORMController
from bot.utils.statesform import ManageClientStates, MainMenu, AddClientStates, SupplyStates
from bot.utils.castom_scroll import sync_scroll, ManagedScroll
from bot.enums.status_enums import Status

logger = logging.getLogger(__name__)

orm_controller = ORMController()

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def get_clients_list(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tg_id = dialog_manager.event.from_user.id
    clients = await orm_controller.get_clients_by_user_id(tg_id)

    if not clients:
        return {"clients": [], "count": 0, "no_clients": True}

    client_list = [(client.name, client.client_id) for client in clients]
    return {"clients": client_list, "count": len(client_list), "no_clients": False}

async def on_client_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    clients = await orm_controller.get_clients_by_user_id(callback.from_user.id)
    client = next((c for c in clients if str(c.client_id) == item_id), None)

    if client:
        manager.dialog_data["selected_client"] = str(client.client_id)
        manager.dialog_data["selected_client_name"] = client.name
    await manager.switch_to(ManageClientStates.CHOOSE_ACTION, show_mode=ShowMode.EDIT)

async def get_selected_client(dialog_manager: DialogManager, **kwargs):
    return {
        "selected_client": dialog_manager.dialog_data.get("selected_client"),
        "selected_client_name": dialog_manager.dialog_data.get("selected_client_name", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
    }

async def on_my_clients(callback: CallbackQuery, widget, manager: DialogManager):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await manager.start(ManageClientStates.CHOOSE_CLIENT, show_mode=ShowMode.EDIT)

async def get_supplies_list(dialog_manager: DialogManager, **kwargs):
    tg_id = dialog_manager.event.from_user.id
    client_id = dialog_manager.dialog_data.get("selected_client")

    if not client_id:
        return {"supplies": [], "supply_details": []}

    db_supplies = await orm_controller.get_supplies_by_client(tg_id, client_id)

    if not db_supplies:
        return {"supplies": [], "supply_details": ["üì¶ –ù–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫."]}

    db_supplies = sorted(db_supplies, key=lambda x: x.get("api_created_at", ""), reverse=True)

    supply_list = []
    supply_text_list = []

    for supply in db_supplies:
        supply_id = str(supply.get("id", "‚ùå –ë–µ–∑ ID"))
        warehouse_name = supply.get("warehouse_name", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
        box_type = supply.get("box_type", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
        status_enum = Status.from_str(supply.get("status", ""))
        status_rus = status_enum.get_translation() if status_enum else "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"

        supply_list.append((supply_id, supply_id))
        supply_text_list.append(
            f"üîπ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}</b>\n"
            f"üè¨ –°–∫–ª–∞–¥: {warehouse_name}\n"
            f"üì¶ –¢–∏–ø: {box_type}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status_rus}"
        )

    return {
        "supplies": supply_list,
        "supply_details": supply_text_list
    }

async def get_active_catching_tasks(dialog_manager: DialogManager, **kwargs):
    from bot.enums.status_enums import Status

    client_id = dialog_manager.dialog_data.get("selected_client")
    tg_id = dialog_manager.event.from_user.id

    if not client_id:
        return {
            "supplies": [],
            "supply_details": ["‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ client_id –Ω–µ —É–∫–∞–∑–∞–Ω."]
        }

    all_supplies = await orm_controller.get_supplies_by_client(tg_id, client_id)
    catching_supplies = [
        s for s in all_supplies
        if Status.from_str(s.get("status")) == Status.CATCHING
    ]

    if not catching_supplies:
        return {
            "supplies": [],
            "supply_details": ["‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Ç–ª–æ–≤."]
        }

    supply_list = []
    supply_text_list = []

    for supply in catching_supplies:
        supply_id = str(supply.get("id", "‚ùå –ë–µ–∑ ID"))
        warehouse_name = supply.get("warehouse_name", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
        box_type = supply.get("box_type", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
        status_enum = Status.from_str(supply.get("status", ""))
        status_rus = status_enum.get_translation() if status_enum else "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"

        start = supply.get("start_catch_date", "‚Äî")
        end = supply.get("end_catch_date", "‚Äî")

        period = f"{start[:10]} ‚Üí {end[:10]}" if start and end else "‚Äî"

        supply_list.append((supply_id, supply_id))
        supply_text_list.append(
            f"üéØ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}</b>\n"
            f"üè¨ –°–∫–ª–∞–¥: {warehouse_name}\n"
            f"üì¶ –¢–∏–ø: {box_type}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status_rus}\n"
            f"üóìÔ∏è –ü–µ—Ä–∏–æ–¥: {period}"
        )

    return {
        "supplies": supply_list,
        "supply_details": supply_text_list
    }

async def on_page_change(event: CallbackQuery, widget: ManagedScroll, manager: DialogManager, new_page: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    manager.dialog_data["supply_pagination"] = new_page
    supplies = manager.dialog_data.get("cached_supplies", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = new_page * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE
    current_supplies = supplies[start_idx:end_idx]

    if not current_supplies:
        supply_info_text = "üì¶ <b>–ù–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</b>"
        supply_list = []
    else:
        supply_info_text = "üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö:</b>\n\n"
        supply_list = []

        for supply in current_supplies:
            supply_id = str(supply.get("supplyId") or supply.get("preorderId", "–ù–µ —É–∫–∞–∑–∞–Ω"))
            warehouse_name = supply.get("warehouseName", "–ù–µ —É–∫–∞–∑–∞–Ω")
            box_type = supply.get("boxTypeName", "–ù–µ —É–∫–∞–∑–∞–Ω")
            status = supply.get("statusName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            reject_reason = supply.get("rejectReason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

            supply_info_text += (
                f"üîπ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}</b>\n"
                f"üè¨ –°–∫–ª–∞–¥: {warehouse_name}\n"
                f"üì¶ –¢–∏–ø: {box_type}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reject_reason}\n\n"
            )

            supply_list.append((supply_id, supply_id))

    manager.dialog_data["supply_details"] = supply_info_text.strip()
    manager.dialog_data["supplies"] = supply_list

    await manager.show()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

async def on_add_client(callback: CallbackQuery, widget, manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await manager.start(AddClientStates.ENTRY_METHOD, show_mode=ShowMode.EDIT)

async def on_back_pressed(manager: DialogManager):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    manager.dialog_data.pop("cached_supplies", None)  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—ç—à –ø–æ—Å—Ç–∞–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    manager.dialog_data.pop("supply_pagination", None)  # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await manager.back(show_mode=ShowMode.EDIT)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

async def on_supply_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ supply_dialog)."""

    supply_id = item_id
    client_id = manager.dialog_data.get("selected_client")

    if not client_id:
        await callback.message.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç.")
        return

    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ supply_dialog —Å –ø–æ—Å—Ç–∞–≤–∫–æ–π {supply_id}, client_id={client_id}")

    await manager.start(
        state=SupplyStates.CHOOSE_SUPPLY_ACTION,
        data={"supply_id": supply_id, "client_id": client_id},
        mode=StartMode.NORMAL,
        show_mode=ShowMode.EDIT,
    )

async def get_active_tasks(dialog_manager: DialogManager, **kwargs):
    tg_id = dialog_manager.event.from_user.id
    client_id = dialog_manager.dialog_data.get("selected_client")

    if not client_id:
        return {"tasks": [], "selected_client_name": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}

    all_supplies = await orm_controller.get_supplies_by_client(tg_id, client_id)
    catching_tasks = [
        {
            "id": supply["id"],
            "status": Status.from_str(supply["status"]).get_translation(),
            "start": supply.get("start_catch_date", "‚Äî"),
            "end": supply.get("end_catch_date", "‚Äî"),
        }
        for supply in all_supplies
        if supply["status"] == Status.CATCHING.value
    ]

    # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    client = await orm_controller.get_client_by_id(client_id)
    client_name = client.name if client else "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    return {"tasks": catching_tasks, "selected_client_name": client_name}

async def on_name_entered(message: types.Message, manager, value: str):
    client_id = manager.dialog_data.get("selected_client")
    new_name = value
    result = await orm_controller.update_client_name(client_id, new_name)

    await message.answer(result.get("message", result.get("error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")))
    await manager.switch_to(ManageClientStates.CHOOSE_ACTION, show_mode=ShowMode.DELETE_AND_SEND)

async def on_cookies_entered(message: types.Message, manager, value: str):
    client_id = manager.dialog_data.get("selected_client")
    new_cookies = value
    result = await orm_controller.update_client_cookies(client_id, new_cookies)

    await message.answer(result.get("message", result.get("error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ cookies")))
    await manager.switch_to(ManageClientStates.CHOOSE_ACTION, show_mode=ShowMode.DELETE_AND_SEND)

task_dialog = Dialog(
    Window(
        Jinja(
            "{% if no_clients %}‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
            "{% else %}üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:</b>\n\n"
            "{% for client in clients %}üîπ <b>{{ client[0] }}</b> (ID: {{ client[1] }})\n{% endfor %}{% endif %}"
        ),
        Select(
            text=Format("{item[0]}"),
            id="select_supply",
            item_id_getter=operator.itemgetter(1),
            items="clients",  # ‚Üê —Ç–µ–ø–µ—Ä—å –∫–ª—é—á —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            on_click=on_client_selected,
        ),
        Button(
            Jinja("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç"),
            id="add_client",
            on_click=on_add_client,
            when=lambda data, w, m: data.get("no_clients", False)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤
        ),
        Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.start(state=MainMenu.MAIN_MENU, show_mode=ShowMode.EDIT)),
        state=ManageClientStates.CHOOSE_CLIENT,
        getter=get_clients_list,
        parse_mode="HTML",
    ),
    Window(
        Jinja(
            "üîπ <b>–í—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç:</b> {{ selected_client_name }}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ),
        Button(Jinja("üì¶ –ü–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"), id="client_supplies",
               on_click=lambda c, w, m: m.switch_to(ManageClientStates.CLIENT_SUPPLIES, show_mode=ShowMode.EDIT)),
        Button(
            Jinja("üéØ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–ª–æ–≤—ã"),
            id="active_tasks",
            on_click=lambda c, w, m: m.switch_to(ManageClientStates.ACTIVE_TASKS),
        ),
        Button(Jinja("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"), id="update_client",
               on_click=lambda c, w, m: m.switch_to(ManageClientStates.UPDATE_CLIENT)),
        Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.back(show_mode=ShowMode.EDIT)),
        state=ManageClientStates.CHOOSE_ACTION,
        getter=get_selected_client,  # ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏
        parse_mode="HTML",
    ),
    Window(
        List(
            Format("{item}"),
            items='supply_details',
            id="TEXT_SCROLL",
            page_size=5,
        ),
        ScrollingGroup(
            Select(
                Format("{item[0]}"),
                id="select_supply",
                item_id_getter=operator.itemgetter(0),
                items="supplies",
                on_click=on_supply_selected,
            ),
            id="supply_pagination",
            width=1,
            height=5,
            on_page_changed=sync_scroll('TEXT_SCROLL'),  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        ),

        Button(
            Jinja("üîô –ù–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, w, m: on_back_pressed(m),
        ),
        state=ManageClientStates.CLIENT_SUPPLIES,
        getter=get_supplies_list,
        parse_mode="HTML",
    ),
    Window(
        List(
            Format("{item}"),
            items="supply_details",  # üëà —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∏–Ω—Ñ–æ–π –ø–æ –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–µ
            id="ACTIVE_SCROLL_TEXT",
            page_size=5,
        ),
        ScrollingGroup(
            Select(
                Format("{item[0]}"),
                id="active_supply_select",
                item_id_getter=operator.itemgetter(0),
                items="supplies",  # üëà —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (supply_id, supply_id)
                on_click=on_supply_selected,
            ),
            id="active_supply_scroll",
            width=1,
            height=5,
            on_page_changed=sync_scroll("ACTIVE_SCROLL_TEXT"),
        ),
        Button(
            Const("üîô –ù–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, w, m: m.switch_to(state=ManageClientStates.CHOOSE_ACTION,show_mode=ShowMode.EDIT),
        ),
        state=ManageClientStates.ACTIVE_TASKS,
        getter=get_active_catching_tasks,  # üëà —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        parse_mode="HTML",
    ),
    Window(
        Jinja("üõ† –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {{ selected_client_name }}?"),

        Button(Const("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), id="edit_name", on_click=lambda c, w, m: m.switch_to
        (state=ManageClientStates.ENTER_NEW_NAME, show_mode=ShowMode.EDIT)),

        Button(Const("üîê –û–±–Ω–æ–≤–∏—Ç—å cookies"), id="edit_cookies", on_click=lambda c, w, m: m.switch_to
        (state=ManageClientStates.ENTER_NEW_COOKIES, show_mode=ShowMode.EDIT)),

        Button(Const("üîô –ù–∞–∑–∞–¥"), id="back_from_update", on_click=lambda c, w, m: m.switch_to
        (state=ManageClientStates.CHOOSE_ACTION, show_mode=ShowMode.EDIT)),

        state=ManageClientStates.UPDATE_CLIENT,
        getter=get_selected_client,
    ),
    Window(
        Const("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:"),
        TextInput(
            id="new_name_input",
            on_success=lambda m, w, manager, value: on_name_entered(m, manager, value)
        ),
        Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to
        (state=ManageClientStates.CHOOSE_ACTION, show_mode=ShowMode.EDIT)),
        state=ManageClientStates.ENTER_NEW_NAME,
    ),
    Window(
        Const("üîê –í—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ cookies –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:"),
        TextInput(
            id="new_cookies_input",
            on_success=lambda m, w, manager, value: on_cookies_entered(m, manager, value)
        ),
        Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to
        (state=ManageClientStates.CHOOSE_ACTION, show_mode=ShowMode.EDIT)),
        state=ManageClientStates.ENTER_NEW_COOKIES,
    )
)
