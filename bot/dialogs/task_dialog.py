import operator
from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.kbd import Select, Button, ScrollingGroup
from aiogram_dialog.widgets.text import Jinja
from aiogram_dialog import DialogManager
from aiogram.types import CallbackQuery
from database.controller.ORM import ORMController
from bot.utils.statesform import ManageClientStates, MainMenu

import logging

logger = logging.getLogger(__name__)

orm_controller = ORMController()

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def get_clients_list(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tg_id = dialog_manager.event.from_user.id
    clients = await orm_controller.get_clients_by_user_id(tg_id)

    client_list = [(client.name, client.client_id) for client in clients]
    return {"clients": client_list, "count": len(client_list)}

async def on_client_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    manager.dialog_data["selected_client"] = item_id
    await manager.switch_to(ManageClientStates.CHOOSE_ACTION)

async def on_my_clients(callback: CallbackQuery, widget, manager: DialogManager):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await manager.start(ManageClientStates.CHOOSE_CLIENT)

async def get_supplies_list(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º."""
    tg_id = dialog_manager.event.from_user.id
    client_id = dialog_manager.dialog_data.get("selected_client")

    if not client_id:
        return {"supplies": [], "supply_details": "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º"}

    try:
        client_id = int(client_id)
    except ValueError:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è client_id ({client_id}) –∫ int")
        return {"supplies": [], "supply_details": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"}

    # üî• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏
    supplies = await orm_controller.get_supplies_by_client(tg_id, client_id)
    if not supplies:
        return {"supplies": [], "supply_details": "üì¶ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫"}

    # üî• –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    page = dialog_manager.dialog_data.get("supply_pagination", 0)

    # üî• –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE
    current_supplies = supplies[start_idx:end_idx]

    # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not current_supplies:
        return {"supplies": [], "supply_details": "üì¶ –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫."}

    # üî• –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫
    supply_info_text = "üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö:</b>\n\n"
    supply_list = []

    for supply in current_supplies:
        supply_id = supply.get("supplyId") or supply.get("preorderId", "–ù–µ —É–∫–∞–∑–∞–Ω")
        warehouse_name = supply.get("warehouseName", "–ù–µ —É–∫–∞–∑–∞–Ω")
        box_type = supply.get("boxTypeName", "–ù–µ —É–∫–∞–∑–∞–Ω")
        status = supply.get("statusName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

        supply_info_text += (
            f"üîπ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}</b>\n"
            f"üè¨ –°–∫–ª–∞–¥: {warehouse_name}\n"
            f"üì¶ –¢–∏–ø: {box_type}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status}\n\n"
        )

        supply_list.append((str(supply_id), str(supply_id)))

    return {
        "supplies": supply_list,
        "supply_details": supply_info_text,
        "count": len(supply_list),
    }

async def on_page_change(event, widget, manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ ScrollingGroup"""
    current_page = await widget.get_page(manager)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    manager.dialog_data["supply_pagination"] = current_page  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
    await manager.next()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –¥–∏–∞–ª–æ–≥–∞

async def on_supply_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"""
    manager.dialog_data["selected_supply"] = item_id
    await manager.switch_to(ManageClientStates.SUPPLY_ACTIONS)


task_dialog = Dialog(
    # –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞
    Window(
        Jinja(
            "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:</b>\n\n"
            "{% for client in clients %}üîπ <b>{{ client[0] }}</b> (ID: {{ client[1] }})\n{% endfor %}"
        ),
        Select(
            text=Jinja("üîπ {{ item[0] }}"),
            id="select_client",
            item_id_getter=operator.itemgetter(1),
            items="clients",
            on_click=on_client_selected,
        ),
        Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.start(MainMenu.MAIN_MENU)),
        state=ManageClientStates.CHOOSE_CLIENT,
        getter=get_clients_list,
        parse_mode="HTML",
    ),

    # –û–∫–Ω–æ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
    Window(
        Jinja(
            "üîπ <b>–í—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç:</b> {{ selected_client }}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ),
        Button(Jinja("üì¶ –ü–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"), id="client_supplies",
               on_click=lambda c, w, m: m.switch_to(ManageClientStates.CLIENT_SUPPLIES)),
        Button(Jinja("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"), id="update_client",
               on_click=lambda c, w, m: m.switch_to(ManageClientStates.UPDATE_CLIENT)),
        Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to(ManageClientStates.CHOOSE_CLIENT)),
        state=ManageClientStates.CHOOSE_ACTION,
        parse_mode="HTML",
    ),
    Window(
        Jinja("üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö:</b>\n\n{{ supply_details }}"),  # üî• –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç
        ScrollingGroup(
            Select(
                text=Jinja("üì¶ {{ item[0] }}"),  # üî• –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ—Å—Ç–∞–≤–∫–∏
                id="select_supply",
                item_id_getter=operator.itemgetter(1),
                items="supplies",
                on_click=on_supply_selected,
            ),
            id="supply_pagination",
            width=1,  # –û–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞
            height=PAGE_SIZE,  # 5 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            on_page_changed=on_page_change,  # üî• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        ),
        Button(
            Jinja("üîô –ù–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, w, m: m.switch_to(ManageClientStates.CHOOSE_ACTION)
        ),
        state=ManageClientStates.CLIENT_SUPPLIES,
        getter=get_supplies_list,
        parse_mode="HTML",
    )
)
