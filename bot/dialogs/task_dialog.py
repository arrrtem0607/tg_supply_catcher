import operator
import logging

from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.kbd import Select, Button, ScrollingGroup
from aiogram_dialog.widgets.text import Jinja, ScrollingText, List, Format
from aiogram_dialog import DialogManager
from aiogram.types import CallbackQuery
from database.controller.ORM import ORMController
from bot.utils.statesform import ManageClientStates, MainMenu, AddClientStates

from bot.utils.castom_scroll import sync_scroll, ManagedScroll

logger = logging.getLogger(__name__)

orm_controller = ORMController()

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def get_clients_list(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tg_id = dialog_manager.event.from_user.id
    clients = await orm_controller.get_clients_by_user_id(tg_id)

    if not clients:
        return {"clients": [], "count": 0, "no_clients": True}

    client_list = [(client.name, client.client_id) for client in clients]
    return {"clients": client_list, "count": len(client_list), "no_clients": False}

async def on_client_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    manager.dialog_data["selected_client"] = item_id
    await manager.switch_to(ManageClientStates.CHOOSE_ACTION)

async def on_my_clients(callback: CallbackQuery, widget, manager: DialogManager):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await manager.start(ManageClientStates.CHOOSE_CLIENT)

async def get_supplies_list(dialog_manager: DialogManager, **kwargs):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    tg_id = dialog_manager.event.from_user.id
    client_id = dialog_manager.dialog_data.get("selected_client")

    if not client_id:
        return {"supplies": [], "supply_details": "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º"}

    # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –ø–æ—Å—Ç–∞–≤–∫–∏
    if "cached_supplies" not in dialog_manager.dialog_data:
        supplies = await orm_controller.get_supplies_by_client(tg_id, client_id)

        if not supplies:
            return {
                "supplies": [],
                "supply_details": "üì¶ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫"
            }

        # ‚úÖ –ö–µ—à–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏
        supplies = sorted(supplies, key=lambda x: x.get("createDate", 0), reverse=True)
        dialog_manager.dialog_data["cached_supplies"] = supplies
        dialog_manager.dialog_data["supply_pagination"] = 0  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    supplies = dialog_manager.dialog_data["cached_supplies"]
    first_page_supplies = supplies

    supply_list = []
    supply_text_list = []

    for supply in first_page_supplies:
        supply_id = str(supply.get("supplyId") or supply.get("preorderId", "–ù–µ —É–∫–∞–∑–∞–Ω"))
        warehouse_name = supply.get("warehouseName", "–ù–µ —É–∫–∞–∑–∞–Ω")
        box_type = supply.get("boxTypeName", "–ù–µ —É–∫–∞–∑–∞–Ω")
        status = supply.get("statusName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        reject_reason = supply.get("rejectReason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        supply_list.append(supply_id)
        supply_text_list.append(f"üîπ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}</b>\n"
            f"üè¨ –°–∫–ª–∞–¥: {warehouse_name}\n"
            f"üì¶ –¢–∏–ø: {box_type}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
            f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reject_reason}\n\n")

    # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    print({
        "supplies": supply_list,
        "supply_details": supply_text_list
    })
    return {
        "supplies": supply_list,
        "supply_details": supply_text_list
    }

async def on_page_change(event: CallbackQuery, widget: ManagedScroll, manager: DialogManager, new_page: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    manager.dialog_data["supply_pagination"] = new_page
    supplies = manager.dialog_data.get("cached_supplies", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = new_page * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE
    current_supplies = supplies[start_idx:end_idx]

    if not current_supplies:
        supply_info_text = "üì¶ <b>–ù–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</b>"
        supply_list = []
    else:
        supply_info_text = "üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö:</b>\n\n"
        supply_list = []

        for supply in current_supplies:
            supply_id = str(supply.get("supplyId") or supply.get("preorderId", "–ù–µ —É–∫–∞–∑–∞–Ω"))
            warehouse_name = supply.get("warehouseName", "–ù–µ —É–∫–∞–∑–∞–Ω")
            box_type = supply.get("boxTypeName", "–ù–µ —É–∫–∞–∑–∞–Ω")
            status = supply.get("statusName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            reject_reason = supply.get("rejectReason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

            supply_info_text += (
                f"üîπ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}</b>\n"
                f"üè¨ –°–∫–ª–∞–¥: {warehouse_name}\n"
                f"üì¶ –¢–∏–ø: {box_type}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reject_reason}\n\n"
            )

            supply_list.append((supply_id, supply_id))

    manager.dialog_data["supply_details"] = supply_info_text.strip()
    manager.dialog_data["supplies"] = supply_list

    await manager.show()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

async def on_supply_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"""
    manager.dialog_data["selected_supply"] = item_id
    await manager.switch_to(ManageClientStates.SUPPLY_ACTIONS)

async def on_add_client(callback: CallbackQuery, widget, manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await manager.start(AddClientStates.ENTER_NAME)


task_dialog = Dialog(
    Window(
        Jinja(
            "{% if no_clients %}‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
            "{% else %}üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:</b>\n\n"
            "{% for client in clients %}üîπ <b>{{ client[0] }}</b> (ID: {{ client[1] }})\n{% endfor %}{% endif %}"
        ),
        Select(
            text=Jinja("üîπ {{ item[0] }}"),
            id="select_client",
            item_id_getter=operator.itemgetter(1),
            items="clients",
            on_click=on_client_selected,
            when=lambda data, w, m: not data.get("no_clients", False)  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –Ω–µ—Ç
        ),
        Button(
            Jinja("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç"),
            id="add_client",
            on_click=on_add_client,
            when=lambda data, w, m: data.get("no_clients", False)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤
        ),
        Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.start(MainMenu.MAIN_MENU)),
        state=ManageClientStates.CHOOSE_CLIENT,
        getter=get_clients_list,
        parse_mode="HTML",
    ),

    # –û–∫–Ω–æ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
    Window(
        Jinja(
            "üîπ <b>–í—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç:</b> {{ selected_client }}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ),
        Button(Jinja("üì¶ –ü–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"), id="client_supplies",
               on_click=lambda c, w, m: m.switch_to(ManageClientStates.CLIENT_SUPPLIES)),
        Button(Jinja("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"), id="update_client",
               on_click=lambda c, w, m: m.switch_to(ManageClientStates.UPDATE_CLIENT)),
        Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.switch_to(ManageClientStates.CHOOSE_CLIENT)),
        state=ManageClientStates.CHOOSE_ACTION,
        parse_mode="HTML",
    ),
    Window(
        List(
            Format("{pos}: {item}"),
            items='supply_details',
            id="TEXT_SCROLL",
            page_size=5,
        ),
        ScrollingGroup(
            Select(
                Format("{item}"),
                id="select_supply",
                item_id_getter=operator.itemgetter(0),
                items="supplies",
                on_click=on_supply_selected,
            ),
            id="supply_pagination",
            width=1,
            height=5,
            on_page_changed=sync_scroll('TEXT_SCROLL'),  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        ),

        # Button(
        #     Jinja("üîô –ù–∞–∑–∞–¥"),
        #     id="back",
        #     on_click=lambda c, w, m: m.switch_to(ManageClientStates.CHOOSE_ACTION),
        # ),
        state=ManageClientStates.CLIENT_SUPPLIES,
        getter=get_supplies_list,
        #parse_mode="HTML",
        preview_data=get_supplies_list
    )
)
