import operator
import logging
from datetime import date
import aiohttp

from aiogram_dialog import Dialog, Window, ShowMode
from aiogram_dialog.widgets.kbd import Select, Button, ScrollingGroup, Back, Calendar
from aiogram_dialog.widgets.text import Jinja, List, Format, Const
from aiogram_dialog import DialogManager
from aiogram.types import CallbackQuery
from database.controller.ORM import ORMController
from bot.utils.statesform import ManageClientStates, MainMenu, AddClientStates
from bot.utils.castom_scroll import sync_scroll, ManagedScroll
from bot.enums.status_enums import Status

logger = logging.getLogger(__name__)

orm_controller = ORMController()

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def get_clients_list(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tg_id = dialog_manager.event.from_user.id
    clients = await orm_controller.get_clients_by_user_id(tg_id)

    if not clients:
        return {"clients": [], "count": 0, "no_clients": True}

    client_list = [(client.name, client.client_id) for client in clients]
    return {"clients": client_list, "count": len(client_list), "no_clients": False}

async def on_client_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    clients = await orm_controller.get_clients_by_user_id(callback.from_user.id)
    client = next((c for c in clients if str(c.client_id) == item_id), None)

    if client:
        manager.dialog_data["selected_client"] = str(client.client_id)
        manager.dialog_data["selected_client_name"] = client.name
    await manager.switch_to(ManageClientStates.CHOOSE_ACTION, show_mode=ShowMode.EDIT)

async def get_selected_client(dialog_manager: DialogManager, **kwargs):
    return {
        "selected_client": dialog_manager.dialog_data.get("selected_client"),
        "selected_client_name": dialog_manager.dialog_data.get("selected_client_name", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
    }

async def on_my_clients(callback: CallbackQuery, widget, manager: DialogManager):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await manager.start(ManageClientStates.CHOOSE_CLIENT)

async def get_supplies_list(dialog_manager: DialogManager, **kwargs):
    tg_id = dialog_manager.event.from_user.id
    client_id = dialog_manager.dialog_data.get("selected_client")

    logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}, client_id: {client_id}")

    if not client_id:
        logger.warning("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ client_id. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return {"supplies": [], "supply_details": []}  # supply_details ‚Üí —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    force_reload = dialog_manager.dialog_data.pop("force_reload", False)
    if force_reload or "cached_supplies" not in dialog_manager.dialog_data:
        db_supplies = await orm_controller.get_supplies_by_client(tg_id, client_id)

        if not db_supplies:
            logger.warning(f"–ü–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return {
                "supplies": [],
                "supply_details": []
            }

        db_supplies = sorted(db_supplies, key=lambda x: x.get("api_created_at", ""), reverse=True)
        dialog_manager.dialog_data["cached_supplies"] = db_supplies
        dialog_manager.dialog_data["supply_pagination"] = 0
        logger.info(f"–ö–µ—à–∏—Ä–æ–≤–∞–Ω–æ {len(db_supplies)} –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∫–µ—à–∞
    db_supplies = dialog_manager.dialog_data["cached_supplies"]
    first_page_supplies = db_supplies[:1000]

    supply_list = []
    supply_text_list = []

    for supply in first_page_supplies:
        supply_id = str(supply.get("id", "‚ùå –ë–µ–∑ ID"))
        warehouse_name = supply.get("warehouse_name", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
        box_type = supply.get("box_type", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
        status_enum = Status.from_str(supply.get("status", ""))
        status_rus = status_enum.get_translation() if status_enum else "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"

        supply_list.append((supply_id, supply_id))
        supply_text_list.append(
            f"üîπ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}</b>\n"
            f"üè¨ –°–∫–ª–∞–¥: {warehouse_name}\n"
            f"üì¶ –¢–∏–ø: {box_type}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status_rus}"
        )

    return {
        "supplies": supply_list,
        "supply_details": supply_text_list
    }

async def get_active_catching_tasks(dialog_manager: DialogManager, **kwargs):
    from bot.enums.status_enums import Status

    client_id = dialog_manager.dialog_data.get("selected_client")
    tg_id = dialog_manager.event.from_user.id

    if not client_id:
        return {
            "supplies": [],
            "supply_details": ["‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ client_id –Ω–µ —É–∫–∞–∑–∞–Ω."]
        }

    all_supplies = await orm_controller.get_supplies_by_client(tg_id, client_id)
    catching_supplies = [
        s for s in all_supplies
        if Status.from_str(s.get("status")) == Status.CATCHING
    ]

    if not catching_supplies:
        return {
            "supplies": [],
            "supply_details": ["‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Ç–ª–æ–≤."]
        }

    supply_list = []
    supply_text_list = []

    for supply in catching_supplies:
        supply_id = str(supply.get("id", "‚ùå –ë–µ–∑ ID"))
        warehouse_name = supply.get("warehouse_name", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
        box_type = supply.get("box_type", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
        status_enum = Status.from_str(supply.get("status", ""))
        status_rus = status_enum.get_translation() if status_enum else "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"

        start = supply.get("start_catch_date", "‚Äî")
        end = supply.get("end_catch_date", "‚Äî")

        period = f"{start[:10]} ‚Üí {end[:10]}" if start and end else "‚Äî"

        supply_list.append((supply_id, supply_id))
        supply_text_list.append(
            f"üéØ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}</b>\n"
            f"üè¨ –°–∫–ª–∞–¥: {warehouse_name}\n"
            f"üì¶ –¢–∏–ø: {box_type}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status_rus}\n"
            f"üóìÔ∏è –ü–µ—Ä–∏–æ–¥: {period}"
        )

    return {
        "supplies": supply_list,
        "supply_details": supply_text_list
    }

async def on_page_change(event: CallbackQuery, widget: ManagedScroll, manager: DialogManager, new_page: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    manager.dialog_data["supply_pagination"] = new_page
    supplies = manager.dialog_data.get("cached_supplies", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = new_page * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE
    current_supplies = supplies[start_idx:end_idx]

    if not current_supplies:
        supply_info_text = "üì¶ <b>–ù–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</b>"
        supply_list = []
    else:
        supply_info_text = "üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö:</b>\n\n"
        supply_list = []

        for supply in current_supplies:
            supply_id = str(supply.get("supplyId") or supply.get("preorderId", "–ù–µ —É–∫–∞–∑–∞–Ω"))
            warehouse_name = supply.get("warehouseName", "–ù–µ —É–∫–∞–∑–∞–Ω")
            box_type = supply.get("boxTypeName", "–ù–µ —É–∫–∞–∑–∞–Ω")
            status = supply.get("statusName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            reject_reason = supply.get("rejectReason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

            supply_info_text += (
                f"üîπ <b>–ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id}</b>\n"
                f"üè¨ –°–∫–ª–∞–¥: {warehouse_name}\n"
                f"üì¶ –¢–∏–ø: {box_type}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reject_reason}\n\n"
            )

            supply_list.append((supply_id, supply_id))

    manager.dialog_data["supply_details"] = supply_info_text.strip()
    manager.dialog_data["supplies"] = supply_list

    await manager.show()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

async def on_add_client(callback: CallbackQuery, widget, manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await manager.start(AddClientStates.ENTER_NAME)

async def on_back_pressed(manager: DialogManager):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    manager.dialog_data.pop("cached_supplies", None)  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—ç—à –ø–æ—Å—Ç–∞–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    manager.dialog_data.pop("supply_pagination", None)  # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await manager.back(show_mode=ShowMode.EDIT)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

async def on_back_to_previous(callback, button, manager: DialogManager):
    print(manager.current_stack())
    print(manager.current_context())
    stack = await manager.current_stack().stack()  # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if len(stack) >= 2:
        previous_state = stack[-2].state
        await manager.switch_to(previous_state, show_mode=ShowMode.EDIT)
    else:
        from bot.utils.statesform import MainMenu
        await manager.switch_to(MainMenu.MAIN_MENU, show_mode=ShowMode.EDIT)

async def get_supply_options(dialog_manager: DialogManager, **kwargs):
    supply_id = dialog_manager.dialog_data.get("selected_supply")
    is_catching = dialog_manager.dialog_data.get("is_catching", False)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}. –°—Ç–∞—Ç—É—Å is_catching: {is_catching}")

    buttons = []
    if is_catching:
        buttons.append(("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ª–æ–≤", "cancel"))
        buttons.append(("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "edit"))
    else:
        buttons.append(("üìå –í–∑—è—Ç—å –Ω–∞ –æ—Ç–ª–æ–≤", "catch"))

    logger.info(f"–ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {buttons}")
    return {"options": buttons, "supply_id": supply_id}

async def on_supply_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏."""
    logger.info(f"–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏: {item_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π supply_id –≤ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    manager.dialog_data["selected_supply"] = item_id
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω supply_id –≤ dialog_data: {item_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    supply = await orm_controller.get_supply_by_id(item_id)
    if supply:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        is_catching = (supply.status == Status.CATCHING)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enum Status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        manager.dialog_data["is_catching"] = is_catching

        logger.info(
            f"–°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–∫–∏ {item_id}: {Status.get_translation(supply.status)}. –°–æ—Å—Ç–æ—è–Ω–∏–µ is_catching –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {manager.dialog_data['is_catching']}")
    else:
        # –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        manager.dialog_data["is_catching"] = False
        logger.warning(f"–ü–æ—Å—Ç–∞–≤–∫–∞ —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ is_catching —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ False.")

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω {ManageClientStates.CHOOSE_SUPPLY_ACTION}")
    await manager.switch_to(ManageClientStates.CHOOSE_SUPPLY_ACTION, show_mode=ShowMode.EDIT)

async def on_action_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    if item_id == "cancel":
        await cancel_catch(manager)
    elif item_id == "edit":
        await manager.switch_to(ManageClientStates.CHOOSE_COEFFICIENT, show_mode=ShowMode.EDIT)
    else:
        await manager.switch_to(ManageClientStates.CHOOSE_COEFFICIENT, show_mode=ShowMode.EDIT)

async def get_active_tasks(dialog_manager: DialogManager, **kwargs):
    tg_id = dialog_manager.event.from_user.id
    client_id = dialog_manager.dialog_data.get("selected_client")

    if not client_id:
        return {"tasks": [], "selected_client_name": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}

    all_supplies = await orm_controller.get_supplies_by_client(tg_id, client_id)
    catching_tasks = [
        {
            "id": supply["id"],
            "status": Status.from_str(supply["status"]).get_translation(),
            "start": supply.get("start_catch_date", "‚Äî"),
            "end": supply.get("end_catch_date", "‚Äî"),
        }
        for supply in all_supplies
        if supply["status"] == Status.CATCHING.value
    ]

    # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    client = await orm_controller.get_client_by_id(client_id)
    client_name = client.name if client else "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    return {"tasks": catching_tasks, "selected_client_name": client_name}

async def on_coefficient_input(message, widget, manager: DialogManager, value: str):
    try:
        manager.dialog_data["coefficient"] = int(value)

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `start_date`, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "start_date" not in manager.dialog_data:
            manager.dialog_data["start_date"] = None

        await manager.switch_to(ManageClientStates.CHOOSE_START_DATE, show_mode=ShowMode.EDIT)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

async def on_coefficient_selected(callback: CallbackQuery, widget, manager: DialogManager, item_id: str):
    manager.dialog_data["coefficient"] = int(item_id)
    await manager.switch_to(ManageClientStates.CHOOSE_START_DATE, show_mode=ShowMode.EDIT)

async def get_start_date(dialog_manager: DialogManager, **kwargs):
    return {"start_date": dialog_manager.dialog_data.get("start_date", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")}

async def get_end_date(dialog_manager: DialogManager, **kwargs):
    return {"end_date": dialog_manager.dialog_data.get("end_date", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")}

async def on_date_selected(callback: CallbackQuery, widget, manager: DialogManager, selected_date: date):
    state = manager.current_context().state
    selected_str = selected_date.strftime("%Y-%m-%d")

    if state == ManageClientStates.CHOOSE_START_DATE:
        manager.dialog_data["start_date"] = selected_str
        await manager.switch_to(ManageClientStates.CHOOSE_END_DATE, show_mode=ShowMode.EDIT)

    elif state == ManageClientStates.CHOOSE_END_DATE:
        manager.dialog_data["end_date"] = selected_str
        await manager.switch_to(ManageClientStates.CHOOSE_SKIP_DATES, show_mode=ShowMode.EDIT)

    elif state == ManageClientStates.CHOOSE_SKIP_DATES:
        skip_dates = manager.dialog_data.get("skip_dates", [])
        if selected_str in skip_dates:
            skip_dates.remove(selected_str)
        else:
            skip_dates.append(selected_str)
        manager.dialog_data["skip_dates"] = skip_dates

        # –û–±–Ω–æ–≤–∏–º –æ–∫–Ω–æ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç `{skip_dates}` –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
        await manager.show()

async def get_skip_dates(dialog_manager: DialogManager, **kwargs):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"""
    return {"skip_dates": dialog_manager.dialog_data.get("skip_dates", [])}

async def on_confirm(callback: CallbackQuery, button, manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ª–æ–≤–∞"""
    supply_id = int(manager.dialog_data["selected_supply"])
    start_date = manager.dialog_data["start_date"]
    end_date = manager.dialog_data["end_date"]
    skip_dates = manager.dialog_data.get("skip_dates", [])
    coefficient = manager.dialog_data["coefficient"]
    manager.dialog_data["force_reload"] = True

    result = await orm_controller.confirm_supply_catching(
        supply_id=supply_id,
        start_date=start_date,
        end_date=end_date,
        skip_dates=skip_dates,
        coefficient=coefficient
    )

    if "error" in result:
        await callback.message.answer(f"‚ùå {result['error']}")
    else:
        await callback.message.answer(f"‚úÖ {result['message']}")

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for key in ("selected_supply", "start_date", "end_date", "skip_dates", "coefficient", "is_catching"):
        manager.dialog_data.pop(key, None)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
    await manager.switch_to(ManageClientStates.CLIENT_SUPPLIES, show_mode=ShowMode.DELETE_AND_SEND)

async def get_confirm_data(dialog_manager: DialogManager, **kwargs):
    return {
        "supply_id": dialog_manager.dialog_data.get("selected_supply", "‚ùå"),
        "start_date": dialog_manager.dialog_data.get("start_date", "‚ùå"),
        "end_date": dialog_manager.dialog_data.get("end_date", "‚ùå"),
        "coefficient": dialog_manager.dialog_data.get("coefficient", "‚ùå"),
        "skip_dates": ", ".join(dialog_manager.dialog_data.get("skip_dates", [])) or "‚Äî"
    }

async def cancel_supply_task(manager: DialogManager):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API"""
    supply_id = int(manager.dialog_data["selected_supply"])
    client_id = manager.dialog_data["selected_client"]  # UUID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞

    data = {
        "client_id": client_id,
        "preorder_id": supply_id,
    }

    logger.info(f"‚õî –û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")

    async with aiohttp.ClientSession() as session:
        async with session.post("http://127.0.0.1:8001/catcher/cancel_task", json=data) as resp:
            response_text = await resp.text()
            if resp.status == 200:
                await manager.event.message.answer(f"üóë –ü–æ—Å—Ç–∞–≤–∫–∞ {supply_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            else:
                await manager.event.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ—Å—Ç–∞–≤–∫–∏: {response_text}")

    # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—Ç
    manager.dialog_data.pop("cached_supplies", None)
    manager.dialog_data.pop("supply_pagination", None)
    await manager.switch_to(ManageClientStates.CLIENT_SUPPLIES, show_mode=ShowMode.EDIT)

async def cancel_catch(manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–ª–æ–≤–∞"""
    supply_id = int(manager.dialog_data["selected_supply"])
    client_id = manager.dialog_data["selected_client"]
    manager.dialog_data["force_reload"] = True

    result = await orm_controller.cancel_catching(client_id=client_id, supply_id=supply_id)

    if "error" in result:
        await manager.event.message.answer(f"‚ùå {result['error']}")
    else:
        await manager.event.message.answer(f"‚úÖ {result['message']}")

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for key in ("selected_supply", "start_date", "end_date", "skip_dates", "coefficient", "is_catching"):
        manager.dialog_data.pop(key, None)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
    await manager.switch_to(ManageClientStates.CLIENT_SUPPLIES, show_mode=ShowMode.DELETE_AND_SEND)


task_dialog = Dialog(
    Window(
        Jinja(
            "{% if no_clients %}‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
            "{% else %}üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç:</b>\n\n"
            "{% for client in clients %}üîπ <b>{{ client[0] }}</b> (ID: {{ client[1] }})\n{% endfor %}{% endif %}"
        ),
        Select(
            text=Format("{item[0]}"),
            id="select_supply",
            item_id_getter=operator.itemgetter(1),
            items="clients",  # ‚Üê —Ç–µ–ø–µ—Ä—å –∫–ª—é—á —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            on_click=on_client_selected,
        ),
        Button(
            Jinja("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç"),
            id="add_client",
            on_click=on_add_client,
            when=lambda data, w, m: data.get("no_clients", False)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤
        ),
        Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.start(MainMenu.MAIN_MENU, show_mode=ShowMode.EDIT)),
        state=ManageClientStates.CHOOSE_CLIENT,
        getter=get_clients_list,
        parse_mode="HTML",
    ),
    Window(
        Jinja(
            "üîπ <b>–í—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç:</b> {{ selected_client_name }}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ),
        Button(Jinja("üì¶ –ü–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"), id="client_supplies",
               on_click=lambda c, w, m: m.switch_to(ManageClientStates.CLIENT_SUPPLIES, show_mode=ShowMode.EDIT)),
        Button(
            Jinja("üéØ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–ª–æ–≤—ã"),
            id="active_tasks",
            on_click=lambda c, w, m: m.switch_to(ManageClientStates.ACTIVE_TASKS),
        ),
        Button(Jinja("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"), id="update_client",
               on_click=lambda c, w, m: m.switch_to(ManageClientStates.UPDATE_CLIENT)),
        Button(Jinja("üîô –ù–∞–∑–∞–¥"), id="back", on_click=lambda c, w, m: m.back(show_mode=ShowMode.EDIT)),
        state=ManageClientStates.CHOOSE_ACTION,
        getter=get_selected_client,  # ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏
        parse_mode="HTML",
    ),
    Window(
        List(
            Format("{item}"),
            items='supply_details',
            id="TEXT_SCROLL",
            page_size=5,
        ),
        ScrollingGroup(
            Select(
                Format("{item[0]}"),
                id="select_supply",
                item_id_getter=operator.itemgetter(0),
                items="supplies",
                on_click=on_supply_selected,
            ),
            id="supply_pagination",
            width=1,
            height=5,
            on_page_changed=sync_scroll('TEXT_SCROLL'),  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        ),

        Button(
            Jinja("üîô –ù–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, w, m: on_back_pressed(m),
        ),
        state=ManageClientStates.CLIENT_SUPPLIES,
        getter=get_supplies_list,
        parse_mode="HTML",
    ),
    Window(
        Format("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ {supply_id}:"),
        Select(
            text=Format("{item[0]}"),
            items="options",
            id="supply_action",
            item_id_getter=lambda x: x[1],
            on_click=on_action_selected,
        ),
        Button(
            Jinja("üîô –ù–∞–∑–∞–¥"),
            id="back",
            on_click=on_back_to_previous,
        ),
        state=ManageClientStates.CHOOSE_SUPPLY_ACTION,
        getter=get_supply_options,
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–æ–≤–∞.\n\n"
              "–ë–æ—Ç –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ:"),
        # üîò –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (0-20)
        ScrollingGroup(
            Select(
                text=Format("{item}"),
                id="select_coefficient",
                item_id_getter=lambda x: str(x),
                items=list(range(0, 21)),
                on_click=on_coefficient_selected,
            ),
            id="coefficient_scroll",
            width=5,  # ‚úÖ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
            height=4,  # ‚úÖ 4 —Å—Ç—Ä–æ–∫–∏ (–≤—Å–µ–≥–æ 20 –∫–Ω–æ–ø–æ–∫)
        ),

        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=ManageClientStates.CHOOSE_COEFFICIENT,
    ),
    Window(
        Format("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞: –¢–µ–∫—É—â–∞—è: {start_date}"),
        Calendar(id="start_date", on_click=on_date_selected),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=ManageClientStates.CHOOSE_START_DATE,
        getter=get_start_date,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π getter
    ),
    Window(
        Format("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è: –¢–µ–∫—É—â–∞—è: {end_date}"),
        Calendar(id="end_date", on_click=on_date_selected),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=ManageClientStates.CHOOSE_END_DATE,
        getter=get_end_date,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π getter
    ),
    Window(
        Format("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å: –¢–µ–∫—É—â–∏–µ: {skip_dates}"),
        Calendar(id="skip_dates", on_click=on_date_selected),
        Button(Const("‚è≠ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="skip", on_click=lambda c, b, d: d.switch_to(ManageClientStates.CONFIRM, show_mode=ShowMode.EDIT)),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=ManageClientStates.CHOOSE_SKIP_DATES,
        getter=get_skip_dates,  # ‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º skip_dates, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
    ),
    Window(
        Jinja(
            "<b>üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            "üÜî –ü–æ—Å—Ç–∞–≤–∫–∞: <code>{{ supply_id }}</code>\n"
            "‚öôÔ∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>{{ coefficient }}</b>\n"
            "üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{{ start_date }}</b>\n"
            "üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{{ end_date }}</b>\n"
            "‚õî –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã: <b>{{ skip_dates }}</b>\n\n"
            "‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ?"
        ),
        Button(Const("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm", on_click=on_confirm),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=ManageClientStates.CONFIRM,
        getter=get_confirm_data,
        parse_mode="HTML",
    ),
    Window(
        List(
            Format("{item}"),
            items="supply_details",  # üëà —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∏–Ω—Ñ–æ–π –ø–æ –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–µ
            id="ACTIVE_SCROLL_TEXT",
            page_size=5,
        ),
        ScrollingGroup(
            Select(
                Format("{item[0]}"),
                id="active_supply_select",
                item_id_getter=operator.itemgetter(0),
                items="supplies",  # üëà —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (supply_id, supply_id)
                on_click=on_supply_selected,
            ),
            id="active_supply_scroll",
            width=1,
            height=5,
            on_page_changed=sync_scroll("ACTIVE_SCROLL_TEXT"),
        ),
        Button(
            Const("üîô –ù–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, w, m: m.back(show_mode=ShowMode.EDIT),
        ),
        state=ManageClientStates.ACTIVE_TASKS,
        getter=get_active_catching_tasks,  # üëà —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        parse_mode="HTML",
    ),
)
